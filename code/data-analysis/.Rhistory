install.packages(tidyverse, dplyr, faux)
install.packages(c("tidyverse", "dplyr", "faux")
)
install.packages("ncvreg", "glmnet", "gcdnet", "MASS", "caret")
install.packages(c("ncvreg", "glmnet", "gcdnet", "MASS", "caret"))
install.packages(c("xgboost", "ranger", "e1071", "parallel"))
library(tidyverse)
require(devtools)
install.packages("devtools")
require(devtools)
install_version("dplyr", version = "1.0.6")
install_version("dplyr", version = "1.0.6")
detach("package:dplyr", unload = TRUE)
remove.packages("dplyr", lib="~/R/win-library/4.1")
install_version("dplyr", version = "1.0.6")
install_version("dplyr", version = "1.0.6", repos = "https://cran.r-project.org/src/contrib/Archive/dplyr/dplyr_1.0.6.tar.gz")
install_version("dplyr", version = "1.0.6", repos = "https://cran.r-project.org/")
install_url("https://cran.r-project.org/src/contrib/Archive/dplyr/dplyr_1.0.6.tar.gz")
install_url("http://cran.r-project.org/src/contrib/Archive/dplyr/dplyr_1.0.6.tar.gz")
install.packages("glmnet")
install.packages("dplyr")
install.packages("ranger")
library(faux)
x <- rnorm_multi(n = 1000, p = 2000, mu = 0, sd = 1, r = 0.1)
x <- rnorm_multi(n = 1000, vars = 2000, mu = 0, sd = 1, r = 0.1)
set.seed(1)
x <- rnorm_multi(n = 1000, vars = 2000, mu = 0, sd = 1, r = 0.1)
View(x)
dat <- [8.9, 12.4, 8.6, 11.3, 9.2, 8.8, 35.1, 6.2, 7.0, 7.1, 11.8, 10.7, 7.6, 9.1, 9.2, 8.2, 9.0, 8.7, 9.1, 10.9, 10.3, 9.6, 7.8, 11.5, 9.3, 7.9, 8.8, 8.8, 12.7, 8.4, 7.8, 5.7, 10.5, 10.5, 9.6, 8.9, 10.2, 10.3, 7.7, 10.6, 8.3, 8.8, 9.5, 8.8, 9.4]
dat <- c(8.9, 12.4, 8.6, 11.3, 9.2, 8.8, 35.1, 6.2, 7.0, 7.1, 11.8, 10.7, 7.6, 9.1, 9.2, 8.2, 9.0, 8.7, 9.1, 10.9, 10.3, 9.6, 7.8, 11.5, 9.3, 7.9, 8.8, 8.8, 12.7, 8.4, 7.8, 5.7, 10.5, 10.5, 9.6, 8.9, 10.2, 10.3, 7.7, 10.6, 8.3, 8.8, 9.5, 8.8, 9.4)
c
dat
sum(dat) / length(dat)
sd(dat)
mean = sum(dat) / length(dat)
sd = 1/(n - 1) * (45 - dat)^2
sd = 1/(length(dat) - 1) * (45 - dat)^2
var = 1/(length(dat) - 1) * (mean - dat)^2
var = 1/(length(dat) - 1) * sum((mean - dat)^2)
sd1 = sqrt(var)
sd2 = sd(dat)
dat <- c(8.9, 12.4, 8.6, 11.3, 9.2, 8.8, 35.1, 6.2, 7.0, 7.1, 11.8, 10.7, 7.6, 9.1, 9.2, 8.2, 9.0, 8.7, 9.1, 10.9, 10.3, 9.6, 7.8, 11.5, 9.3, 7.9, 8.8, 8.8, 12.7, 8.4, 7.8, 5.7, 10.5, 10.5, 9.6, 8.9, 10.2, 10.3, 7.7, 10.6, 8.3, 8.8, 9.5, 8.8, 9.4)
mean <- sum(dat) / length(dat)
var <- 1/(length(dat) - 1) * (mean - dat)^2
stdev <- sqrt(var)
mean
stdev
dat <- c(8.9, 12.4, 8.6, 11.3, 9.2, 8.8, 35.1, 6.2, 7.0, 7.1, 11.8, 10.7, 7.6, 9.1, 9.2, 8.2, 9.0, 8.7, 9.1, 10.9, 10.3, 9.6, 7.8, 11.5, 9.3, 7.9, 8.8, 8.8, 12.7, 8.4, 7.8, 5.7, 10.5, 10.5, 9.6, 8.9, 10.2, 10.3, 7.7, 10.6, 8.3, 8.8, 9.5, 8.8, 9.4)
mean <- sum(dat) / length(dat)
var <- 1/(length(dat) - 1) * (mean - dat)^2
stdev <- sqrt(var)
dat <- c(8.9, 12.4, 8.6, 11.3, 9.2, 8.8, 35.1, 6.2, 7.0, 7.1, 11.8, 10.7, 7.6, 9.1, 9.2, 8.2, 9.0, 8.7, 9.1, 10.9, 10.3, 9.6, 7.8, 11.5, 9.3, 7.9, 8.8, 8.8, 12.7, 8.4, 7.8, 5.7, 10.5, 10.5, 9.6, 8.9, 10.2, 10.3, 7.7, 10.6, 8.3, 8.8, 9.5, 8.8, 9.4)
mean <- sum(dat) / length(dat)
var <- 1/(length(dat) - 1) * sum((mean - dat)^2)
stdev <- sqrt(var)
mean
stdev
dat <- c(8.9, 12.4, 8.6, 11.3, 9.2, 8.8, 35.1, 6.2, 7.0, 7.1, 11.8, 10.7, 7.6, 9.1, 9.2, 8.2, 9.0, 8.7, 9.1, 10.9, 10.3, 9.6, 7.8, 11.5, 9.3, 7.9, 8.8, 8.8, 12.7, 8.4, 7.8, 5.7, 10.5, 10.5, 9.6, 8.9, 10.2, 10.3, 7.7, 10.6, 8.3, 8.8, 9.5, 8.8, 9.4)
ybar <- sum(dat) / length(dat)
variance <- 1/(length(dat) - 1) * sum((ybar - dat)^2)
stdev <- sqrt(variance)
mean
stdev
ybar
stdev
source("~/GitHub/reu-2021/code/monte-carlo/run-simulations.r", echo=TRUE)
params <- readRDS("../../data/monte-carlo/factorial-design.rds")
View(params)
source("~/GitHub/reu-2021/code/monte-carlo/aggregate-results.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/facet-plots.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/facet-plots.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/facet-plots.r", echo=TRUE)
source("~/GitHub/reu-2021/code/tables/generate-table.r", echo=TRUE)
source("~/GitHub/reu-2021/code/tables/generate-table.r", echo=TRUE)
source("~/GitHub/reu-2021/code/tables/generate-table.r", echo=TRUE)
generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
tab
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
tab
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
View(all_linear_results)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
tab
tab[1]
?substr
substr(tab, 1, 20)
substr(tab, 1, 40)
substr(tab, 1, 2000)
substr(tab, 1, 200)
substr(tab, 1, 500)
substr(tab, 1, 800)
substr(tab, 1, 1000)
substr(tab, 1, 1100)
substr(tab, 1, 1200)
substr(tab, 1, 1150)
substr(tab, 1, 1120)
substr(tab, 1, 1110)
substr(tab, 1, 1115)
substr(tab, 1, 1118)
substr(tab, 1, 1117)
?readChar
file_name <- "./table-header.txt"
readChar(file_name)
readChar(file_name, chars = 10)
readChar(file_name, nchars = 10)
readChar(file_name, nchars = 1000)
?substr
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table(tab)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table(tab)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table(tab)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table(tab)
repair_table <- function(table_string) {
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
return(paste(header, substring(table_string, 1118), sep = ""))
}
repair_table(tab)
teststr <- "12345abcde"
substring(teststr, 5)
substring(teststr, 6)
paste("ABCDE", substring(teststr, 6))
paste("ABCDE", substring(teststr, 6), sep = "")
readChar(file_name, nchars = 1000)
readChar("./table-header.txt", nchars = 1000)
header <- readChar("./table-header.txt", nchars = 1000)
paste(header, substring(teststr, 6))
paste(header, substring(teststr, 6), sep = "")
tab
repair_table(tab)
repair_table <- function(table_string) {
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
return(paste(header, substring(table_string, 1118), sep = ""))
}
repair_table <- function(table_string) {
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
return(paste(header, substring(table_string, 1118), sep = ""))
}
repair_table(tab)
paste(header, substring(tab, 1118), sep = "")
paste(header, substring(tab, 1), sep = "")
paste(header, substring(tab, 1, 5), sep = "")
paste(header, substring(tab, 1, 50), sep = "")
paste(header, substr(tab, 1, 50), sep = "")
substring(tab, 1, 50)
paste("t", substring(tab, 1, 50))
header
paste(header, substring(tab, 1, 50))
?paste
header
substring(tab, 1, 50)
length(header)
length(substring(tab, 1, 50))
?substring
substr(tab, 1117)
substr(tab, 1, 1117)
substr(tab, 1, 1118)
substr(tab, 1, 1117)
syvstr("abcd", 2, 4)
substr("abcd", 2, 4)
tab
length(tab)
class(tab)
str(tab)
View(tab)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table <- function(table_string) {
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
substr(table_string, 1, 1117) <- header
return(table_string)
}
repair_table(tab)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table(tab)
print(repair_table(tab))
tab
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
print(tab$text)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
tab$text
print(tab$text)
writeLines(tab$text)
substr(tab$text, 1, 1117)
substr(tab$text, 1, 1117) <- "abc"
tab$text
?substr
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table(tab)
repaired <- repair_table(tab)
write(repaired, file = "text.tex")
tab
?grep
gregexpr(pattern = "\\hline\n1", tab)
?gregexpr
grep(pattern = "\\hline\n1", tab)
a <- grep(pattern = "\\hline\n1", tab)
a <- gregexpr(pattern = "\\hline\n1", tab)
View(a)
a$1
a[[1]]
a <- regexpr(pattern = "\\hline\n1", tab)
1112 + length("\\hline\n1")
1112 + nchar("\\hline\n1")
substring(tab, 1, 1113 + 4)
substring(tab, 1112, 1115)
a <- regexpr(pattern = "\n1", tab)
a
tab[a]
tab[1117]
substring(tab, 1117, 1118)
regexpr(pattern = "\\3", tab)
regexpr(pattern = "\\\\3", tab)
stri <- "test stuff \\3 jesnfsjef"
regexpr(pattern = "\\\\3", stri)
tab
regexpr(pattern = "\\\\\n3", tab)
tab[6264]
substring(tab, 6264, 6264)
substring(tab, 6264, 6268)
substring(tab, 6266, 6268)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
table_string <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
location_of_3 <- regexpr(pattern = "\\\\\n3", table) + 2
print(location_of_3)
new_string <- paste(substring(new_string, 1, location_of_3 - 1), "\\hline", substring(new_string, location_of_3), sep = "")
print(location_of_9)
location_of_9 <- regexpr(pattern = "\\\\\n9", table) + 2
new_string <- paste(substring(new_string, 1, location_of_9 - 1), "\\hline", substring(new_string, location_of_9), sep = "")
}
repair_table(table_string)
repair_table <- function(table_string) {
print("T")
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
location_of_3 <- regexpr(pattern = "\\\\\n3", table) + 2
print(location_of_3)
new_string <- paste(substring(new_string, 1, location_of_3 - 1), "\\hline", substring(new_string, location_of_3), sep = "")
print(location_of_9)
location_of_9 <- regexpr(pattern = "\\\\\n9", table) + 2
new_string <- paste(substring(new_string, 1, location_of_9 - 1), "\\hline", substring(new_string, location_of_9), sep = "")
}
repair_table(table_string)
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
print("T")
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
location_of_3 <- regexpr(pattern = "\\\\\n3", table) + 2
print(location_of_3)
new_string <- paste(substring(new_string, 1, location_of_3 - 1), "\\hline", substring(new_string, location_of_3), sep = "")
print(location_of_9)
location_of_9 <- regexpr(pattern = "\\\\\n9", table) + 2
new_string <- paste(substring(new_string, 1, location_of_9 - 1), "\\hline", substring(new_string, location_of_9), sep = "")
}
repair_table(table_string)
print("T")
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
print("T")
new_string <- paste(header, substring(table_string, old_header_index + 1))
location_of_3 <- regexpr(pattern = "\\\\\n3", table) + 2
print(location_of_3)
new_string <- paste(substring(new_string, 1, location_of_3 - 1), "\\hline", substring(new_string, location_of_3), sep = "")
print(location_of_9)
location_of_9 <- regexpr(pattern = "\\\\\n9", table) + 2
new_string <- paste(substring(new_string, 1, location_of_9 - 1), "\\hline", substring(new_string, location_of_9), sep = "")
}
print("T")
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
print("T")
location_of_3 <- regexpr(pattern = "\\\\\n3", table) + 2
print(location_of_3)
new_string <- paste(substring(new_string, 1, location_of_3 - 1), "\\hline", substring(new_string, location_of_3), sep = "")
print(location_of_9)
location_of_9 <- regexpr(pattern = "\\\\\n9", table) + 2
new_string <- paste(substring(new_string, 1, location_of_9 - 1), "\\hline", substring(new_string, location_of_9), sep = "")
}
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
print("T")
location_of_3 <- regexpr(pattern = "\\\\\n3", new_string) + 2
print(location_of_3)
new_string <- paste(substring(new_string, 1, location_of_3 - 1), "\\hline", substring(new_string, location_of_3), sep = "")
print(location_of_9)
location_of_9 <- regexpr(pattern = "\\\\\n9", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_9 - 1), "\\hline", substring(new_string, location_of_9), sep = "")
}
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
location_of_3 <- regexpr(pattern = "\\\\\n3", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_3 - 1), "\\hline", substring(new_string, location_of_3), sep = "")
location_of_9 <- regexpr(pattern = "\\\\\n9", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_9 - 1), "\\hline", substring(new_string, location_of_9), sep = "")
}
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
location_of_3 <- regexpr(pattern = "\\\\\n3", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_3 - 1), "\\hline", substring(new_string, location_of_3), sep = "")
location_of_9 <- regexpr(pattern = "\\\\\n9", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_9 - 1), "\\hline", substring(new_string, location_of_9), sep = "")
return(new_string)
}
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
location_of_3 <- regexpr(pattern = "\\\\\n3", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_3 - 3), "\\hline", substring(new_string, location_of_3), sep = "")
location_of_6 <- regexpr(pattern = "\\\\\n6", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_6 - 3), "\\hline", substring(new_string, location_of_6), sep = "")
return(new_string)
}
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
location_of_3 <- regexpr(pattern = "\\\\\n3", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_3 - 3), "\\hline", substring(new_string, location_of_3 - 2), sep = "")
location_of_6 <- regexpr(pattern = "\\\\\n6", new_string) + 2
new_string <- paste(substring(new_string, 1, location_of_6 - 3), "\\hline", substring(new_string, location_of_6 - 2), sep = "")
return(new_string)
}
repair_table(table_string)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
tab <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_table(tab)
tab
teststr <- "& $0.46$ \\\\\n6 & OLS"
?gsub
sub(pattern = "\\\\\n6", replacement = "\\\\\\hline\n6")
sub(pattern = "\\\\\n6", replacement = "\\\\\\hline\n6", teststr)
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
table_string <- generate_table(all_linear_results, metric = "train_mse", n = 1000, p = 10)
repair_string(table_string)
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
new_string <- sub(pattern = "\\\\\n3", replacement = "\\\\\\hline\n3", table_string)
new_string <- sub(pattern = "\\\\\n6", replacement = "\\\\\\hline\n6", table_string)
return(new_string)
}
repair_table(table_string)
write(repaired, file = "text.tex")
repaired <- repair_table(table_string)
write(repaired, file = "text.tex")
write(repaired, file = "text.tex")
repaired
write(repaired, file = "test.tex")
repair_table(table_string)
table_string
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
new_string <- sub(pattern = "\\\\\n3", replacement = "\\\\\\hline\n3", table_string)
new_string <- sub(pattern = "\\\\\n6", replacement = "\\\\\\hline\n6", table_string)
return(new_string)
}
repair_string(table_string)
repair_table(table_string)
repair_table(table_string)
return(new_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
print(new_string)
new_string <- sub(pattern = "\\\\\n3", replacement = "\\\\\\hline\n3", new_string)
new_string <- sub(pattern = "\\\\\n6", replacement = "\\\\\\hline\n6", new_string)
return(new_string)
}
repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
new_string <- sub(pattern = "\\\\\n3", replacement = "\\\\\\hline\n3", new_string)
new_string <- sub(pattern = "\\\\\n6", replacement = "\\\\\\hline\n6", new_string)
return(new_string)
}
repair_table(table_string)
write(repaired, file = "test.tex")
r <- repair_table(table_string)
write(r, file = "test.tex")
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
new_string <- sub(pattern = "\\\\\n3", replacement = "\\\\\\\\hline\n3", new_string)
new_string <- sub(pattern = "\\\\\n6", replacement = "\\\\\\\\hline\n6", new_string)
return(new_string)
}
r <- repair_table(table_string)
repair_table <- function(table_string) {
old_header_index <- regexpr(pattern = "\n1", table_string)
file_name <- "./table-header.txt"
header <- readChar(file_name, nchars = 1000)
new_string <- paste(header, substring(table_string, old_header_index + 1))
new_string <- sub(pattern = "\\\\\n3", replacement = "\\\\\\\\hline\n3", new_string)
new_string <- sub(pattern = "\\\\\n6", replacement = "\\\\\\\\hline\n6", new_string)
return(new_string)
}
write(r, file = "test.tex")
source("~/GitHub/reu-2021/code/data-analysis/generate-table.r", echo=TRUE)
generate_table(all_linear_results, metric = "train_mse", filename = "test", path = ".", n = 1000, p = 10)
str_sub("abcde", -1)
substr("abcde", nchar("abcde") - 1, nchar("abcde"))
substr("abcde", nchar("abcde"), nchar("abcde"))
substr("abcde", nchar("abcde"))
generate_table <- function(data, metric, filename, path, ...) {
raw_table <- generate_raw_table(data, metric, ...)
repaired_table <- repair_table(raw_table)
last_char <- substr(path, nchar(path), nchar(path))
if (last_char != "/") {
path <- paste(path, "/", sep = "")
}
directory <- paste(path, ".tex", filename, sep = "")
write(repaired_table, file = directory)
}
generate_table(all_linear_results, metric = "train_mse", filename = "test", path = ".", n = 1000, p = 10)
generate_table <- function(data, metric, filename, path, ...) {
raw_table <- generate_raw_table(data, metric, ...)
repaired_table <- repair_table(raw_table)
last_char <- substr(path, nchar(path), nchar(path))
if (last_char != "/") {
path <- paste(path, "/", sep = "")
}
directory <- paste(path, filename, ".tex", sep = "")
write(repaired_table, file = directory)
}
generate_table(all_linear_results, metric = "train_mse", filename = "test", path = ".", n = 1000, p = 10)
