citation("stats")
citation("MASS")
citation("glmnet")
print(citation("glmnet", bibtex = TRUE))
citation("gcdnet")
citation("ncvreg")
citation("xgboost")
citation("ranger")
citation("randomForest")
citation("e1071")
citation("MASS"
)
source('~/github/reu-2021/code/data-analysis/generate-table.r', echo=TRUE)
View(dimensions)
View(dimensions)
source('~/github/reu-2021/code/data-analysis/generate-table.r', echo=TRUE)
source('~/github/reu-2021/code/data-analysis/generate-table.r', echo=TRUE)
source('~/github/reu-2021/code/data-analysis/generate-table.r', echo=TRUE)
source('~/github/reu-2021/code/data-analysis/generate-table.r', echo=TRUE)
tab
tab <- generate_raw_table(all_linear_results, train_mse, n = 50, p = 10)
tab <- generate_raw_table(all_linear_results, "train_mse", n = 50, p = 10)
tab
toLatex(tab)
generate_raw_table <- function(dat, metric, ...) {
print(metric)
dat <- subset_data(dat, ...)
dat <- dat[!is.na(dat[[metric]]), ]
# table_results contains the data used to generate a LaTeX summary table.
table_results <- dat[c("st_dev", "type", "corr", "model_name", metric)]
table_results[[metric]] <- as.numeric(table_results[[metric]])
# Create a tabular object from the tables library. The rows are layered by the
# standard deviation and model name; the columns are layered by the type
# of correlation and strength of correlation. The means and standard deviations
# of the metric are computed.
if (metric == "train_mse") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "train.mse")
tab <- tabular((st.dev * model.name) ~ (type * corr * train.mse) * (Mean2 + SD2), data = table_results)
}
else if (metric == "test_mse") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "test.mse")
tab <- tabular((st.dev * model.name) ~ (type * corr * test.mse) * (Mean2 + SD2), data = table_results)
}
else if (metric == "tn") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "tn")
tab <- tabular((st.dev * model.name) ~ (type * corr * tn) * (Mean2 + SD2), data = table_results)
}
else if (metric == "fn") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "fn")
tab <- tabular((st.dev * model.name) ~ (type * corr * fn) * (Mean2 + SD2), data = table_results)
}
else if (metric == "fp") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "fp")
tab <- tabular((st.dev * model.name) ~ (type * corr * fp) * (Mean2 + SD2), data = table_results)
}
else if (metric == "tp") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "tp")
tab <- tabular((st.dev * model.name) ~ (type * corr * tp) * (Mean2 + SD2), data = table_results)
}
else if (metric == "sensitivity") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "sensitivity")
tab <- tabular((st.dev * model.name) ~ (type * corr * sensitivity) * (Mean4 + SD4), data = table_results)
}
else if (metric == "specificity") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "specificity")
tab <- tabular((st.dev * model.name) ~ (type * corr * specificity) * (Mean4 + SD4), data = table_results)
}
else {
stop(paste("Did not recognize the metric ", metric, "."))
}
# The following two lines remove rows and columns that have a 0 as the first entry.
# This removes unncessary rows and columns that aren't used for our plot/table.
tab <- tab
tab <- tab[tab[, 1] > -1, ]
tab <<- tab[, tab[1, ] > -1]
# Call the following line to print out the LaTeX table. I could not get it to
# save correctly to a file, so the output must be copy/pasted.
return(toLatex(tab, options = list(justification = "l"))$text)
#return(tab)
}
tab <- generate_raw_table(all_linear_results, "train_mse", n = 50, p = 10)
tabl<- generate_raw_table(all_linear_results, "train_mse", n = 50, p = 10)
tab
View(tab)
toLatex(tab)
toLatex(tab, digits = 1)
toLatex(tab, digits = 10)
toLatex(tab, options = list(digits = 4))
toLatex(tab, options = list(digits = 10))
toLatex(tab, options = list(digits = 1))
toLatex(tab, options = list(justification = "l"))
toLatex(tab, options = list(justification = "l", latexleftpad = FALSE))
toLatex(tab, options = list(justification = "l", latexminus = FALSE))
toLatex(tab, options = list(justification = "l"))
toLatex(tab, options = list(justification = "l", latexminus = FALSE))
toLatex(tab, options = list(justification = "l"))
toLatex(tab, options = list(justification = "l", latexminus = FALSE))
tabl<- generate_raw_table(all_linear_results, "train_mse", n = 50, p = 10)
tabl
source('~/github/reu-2021/code/data-analysis/generate-table.r', echo=TRUE)
source('~/github/reu-2021/code/data-analysis/generate-table.r', echo=TRUE)
source('~/github/reu-2021/code/data-analysis/generate-table.r', echo=TRUE)
t <- generate_raw_table(all_nonlinear_results, train_mse, n = 50, p = 10)
t <- generate_raw_table(all_nonlinear_results, "train_mse", n = 50, p = 10)
toLatex(tab)
generate_raw_table <- function(dat, metric, ...) {
print(metric)
dat <- subset_data(dat, ...)
dat <- dat[!is.na(dat[[metric]]), ]
# table_results contains the data used to generate a LaTeX summary table.
table_results <- dat[c("st_dev", "type", "corr", "model_name", metric)]
table_results[[metric]] <- as.numeric(table_results[[metric]])
# Create a tabular object from the tables library. The rows are layered by the
# standard deviation and model name; the columns are layered by the type
# of correlation and strength of correlation. The means and standard deviations
# of the metric are computed.
if (metric == "train_mse") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "train.mse")
tab <- tabular((st.dev * model.name) ~ (type * corr * train.mse) * (Mean2 + SD2), data = table_results)
}
else if (metric == "test_mse") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "test.mse")
tab <- tabular((st.dev * model.name) ~ (type * corr * test.mse) * (Mean2 + SD2), data = table_results)
}
else if (metric == "tn") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "tn")
tab <- tabular((st.dev * model.name) ~ (type * corr * tn) * (Mean2 + SD2), data = table_results)
}
else if (metric == "fn") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "fn")
tab <- tabular((st.dev * model.name) ~ (type * corr * fn) * (Mean2 + SD2), data = table_results)
}
else if (metric == "fp") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "fp")
tab <- tabular((st.dev * model.name) ~ (type * corr * fp) * (Mean2 + SD2), data = table_results)
}
else if (metric == "tp") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "tp")
tab <- tabular((st.dev * model.name) ~ (type * corr * tp) * (Mean2 + SD2), data = table_results)
}
else if (metric == "sensitivity") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "sensitivity")
tab <- tabular((st.dev * model.name) ~ (type * corr * sensitivity) * (Mean4 + SD4), data = table_results)
}
else if (metric == "specificity") {
names(table_results) <- c("st.dev", "type", "corr", "model.name", "specificity")
tab <- tabular((st.dev * model.name) ~ (type * corr * specificity) * (Mean4 + SD4), data = table_results)
}
else {
stop(paste("Did not recognize the metric ", metric, "."))
}
# The following two lines remove rows and columns that have a 0 as the first entry.
# This removes unncessary rows and columns that aren't used for our plot/table.
tab <- tab
tab <- tab[tab[, 1] > -1, ]
tab <<- tab[, tab[1, ] > -1]
# Call the following line to print out the LaTeX table. I could not get it to
# save correctly to a file, so the output must be copy/pasted.
return(toLatex(tab, options = list(justification = "l", latexrightpad = FALSE))$text)
#return(tab)
}
t <- generate_raw_table(all_nonlinear_results, "train_mse", n = 50, p = 10)
toLatex(tab)
toLatex(tab, latexrightpad = FALSE)
toLatex(tab, options = list(latexrightpad = FALSE))
toLatex(tab)
