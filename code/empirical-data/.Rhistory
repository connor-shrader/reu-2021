test <- test %>%
mutate(V6 = (V1 + V2 + V3 + V4 + V5)/k_folds)
test <- test %>%
mutate(V6 = (V1 + V2 + V3 + V4 + V5)/k_folds)
mutate(V6 = (V1 + V2 + V3 + V4 + V5)/5)
test <- test %>%
mutate(V6 = V1 + V2 + V3 + V4 + V5)
?mutate
mse_df <- as.data.frame(do.call(cbind, cv.mse))
View(mse_df)
mean(mse_df[1,])
mse_df[1,]
mean(as.numeric(mse_df[1,]))
as.numeric(mse.df[1,])
as.numeric(mse_df[1,])
c(mse_df[1,])
as.vector(mse_df[1,])
mean(as.vector(mse_df[1,]))
sum(as.vector(mse_df[1,]))
sum(mse_df[1,])
class(mse_df[1,])
int(mse_df[1,])
str(mse_df)
str(mse_df[1,])
sum(as.vector(mse_df[1,]))
as.vector(mse_df[1,])
class(as.vector(mse_df[1,]))
class(vector(mse_df[1,]))
class(as.list(mse_df[1,]))
as.list(mse_df[1,])
sum(as.list(mse_df[1,]))
split(mse_df, seq(nrow(mse_df)))
split(mse_df, seq(nrow(mse_df)))[1]
mean(split(mse_df, seq(nrow(mse_df)))[1])
clss(split(mse_df, seq(nrow(mse_df)))[1])
class(split(mse_df, seq(nrow(mse_df)))[1])
class(mse_df[,1])
t(mse_df)
rowMeans(mse_df)
mse_df
class(mse_df[1,1])
rowMeans(as.matrix(mse_df))
as.matrix(mse_df)
class(mse_df[1,1])
as.integer(mse_df[1,1])
as.float(mse_df[1,1])
mse_df[1,1]
# Analysis of bcTCGA breast cancer gene expression data
library(glmnet)
library(gcdnet)
library(ncvreg)
library(ranger)
library(xgboost)
library(e1071)
library(caret) #for cross validation data splitting
library(tidyverse) #data cleaning
#set seed
set.seed(12345)
# load data and set it up into a dataframe
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
cancer <- readRDS("bcTCGA.rds")
cancer[["X"]] <- scale(cancer[["X"]])
cancer_df <- as.data.frame(cbind(cancer[["y"]], cancer[["X"]])) #turn matrix into dataframe
colnames(cancer_df)[1] <- "y" #rename y column to "y"
k_folds <- 5
cv_folds <- createFolds(cancer_df[,1], k = k_folds)
calc_mse <- function(model, dat) {
# Obtain the first class for each model.
model_class <- class(model)[1]
# This if chain computes the predicted response variables. The syntax to
# make predictions depends on the model used, since they come from different
# libraries.
if (model_class == "cv.ncvreg") { #checks for mcp or scad model
# Model is SCAD or MCP.
y_hat <-  data.frame(predict(model, X = as.matrix(dat[, -1])))
}
else if (model_class == "cv.glmnet" || model_class == "cv.gcdnet") {
# Model is LASSO, ridge, enet, or adaptive lasso/ridge/enet.
y_hat <-  data.frame(predict(model, newx = as.matrix(dat[, -1])))
}
else if (model_class == "xgb.Booster") {
# Model is XGBoost.
y_hat <- data.frame(predict(model, newdata = as.matrix(dat[, -1])))
}
else if (model_class == "ranger") {
# Model is random forest.
predict_data <- predict(model, data = as.matrix(dat[, -1]))
y_hat <- as.data.frame(predict_data$predictions)
}
else if (model_class == "svm") {
# Model is SVM.
y_hat <- data.frame(predict(model, newdata = as.matrix(dat[, -1])))
}
else {
# lm model.
y_hat <- data.frame(predict(model, dat[,-1]))
}
# Get the actual response values.
y <- dat[, 1]
# Compute MSE.
mse <- mean(((y - y_hat)^2)[, 1]) #take mean of residuals squared
return(mse)
}
models <-  list()
runtimes <- list()
cv.mse <- list()
# perform cross validation of data
for (fold in seq(cv_folds)) {
train_dat <- cancer_df[-cv_folds[[fold]],]
test_dat <- cancer_df[cv_folds[[fold]],]
models[[fold]] <-  list()
runtimes[[fold]] <- list()
cv.mse[[fold]] <- list()
# run glmnet penalized regression techniques (lasso, ridge, and elastic net)
lasso_time <- system.time(lasso <- cv.glmnet(x = as.matrix(train_dat[,-1]), y = as.matrix(train_dat[,1]), alpha = 1))
models[[fold]][["lasso"]] <- lasso
runtimes[[fold]][["lasso"]] <- lasso_time
cv.mse[[fold]][["lasso"]] <- calc_mse(lasso, test_dat)
ridge_time <- system.time(ridge <- cv.glmnet(x = as.matrix(train_dat[,-1]), y = as.matrix(train_dat[,1]), alpha = 0))
models[[fold]][["ridge"]] <- ridge
runtimes[[fold]][["ridge"]] <- ridge_time
cv.mse[[fold]][["ridge"]] <- calc_mse(ridge, test_dat)
enet_time <- system.time(enet <- cv.glmnet(x = as.matrix(train_dat[,-1]), y = as.matrix(train_dat[,1]), alpha = 0.5))
models[[fold]][["enet"]] <- enet
runtimes[[fold]][["enet"]] <- enet_time
cv.mse[[fold]][["enet"]] <- calc_mse(enet, test_dat)
}
View(mse_df)
class(mse_df[1])
class(mse_df[1,])
mse_df[1]
mse_df[1,]
rowMeans(mse_df)
str(mse_df)
str(mse_df[1,1])
as.numeric(as.character(mse_df))
as.numeric(mse_df[1,1])
mse_df <- as.data.frame(do.call(cbind, as.vector(cv.mse)))
mse_df
mse_df[1,1]
mse_df <- as.data.frame(do.call(cbind, as.vector(cv.mse)))
?data.frame
mse_df <- data.frame(c(i for i in cv.mse))
mse_df <- data.frame(c(i (for i in cv.mse)))
mse_df <- data.frame(cv.mse[[1]])
View(mse_df)
mse_df <- data.frame(cv.mse[[1]], cv.mse[[2]], cv.mse[[3]], cv.mse[[4]], cv.mse[[5]])
View(mse_df)
mse_df <- data.frame(c(cv.mse[[1]], cv.mse[[2]], cv.mse[[3]], cv.mse[[4]], cv.mse[[5]]))
data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE))
mse_df <- data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE))
rowMeans(mse_df)
mse_df <- data.frame(do.call(cbind, as.vector(cv.mse)))
mse_df
rowMeans(mse_df)
mse_df <- t(data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
View(mse_df)
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=FALSE)))
View(mse_df)
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=FALSE)))
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
rowMeans(mse_df)
mse_df <- cbind(mse_df, rowMeans(mse_df))
View(mse_df)
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
avg_mse <- rowMeans(mse_df)
mse_df <- cbind(mse_df, avg_mse)
View(mse_df)
unlist(cv.mse)
?matrix
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE), rownames.force = TRUE))
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE, rownames.force = TRUE)))
mse_df <- data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=False))
mse_df <- data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=FALSE))
View(mse_df)
mse_df <- data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE))
View(cv.mse)
View(mse_df)
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
View(cv.mse)
row.names(mse_df) <- c("lasso", "ridge", "enet")
View(cv.mse)
View(mse_df)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
avg_mse <- rowMeans(mse_df)
mse_df <- cbind(mse_df, avg_mse)
row.names(mse_df) <- c("lasso", "ridge", "enet", "adap lasso", "adap ridge", "adap enet", "scad", "mcp")
View(mse_df)
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
View(mse_df)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
View(mse_df)
View(runtimes)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
View(mse_df)
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
avg_mse <- rowMeans(mse_df)
mse_df <- cbind(mse_df, avg_mse)
row.names(mse_df) <- c("lasso", "ridge", "enet", "adap lasso", "adap ridge", "adap enet", "scad", "mcp")
View(cv.mse)
View(mse_df)
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
View(mse_df)
unlist(cv.mse)
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=FALSE)))
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
length(cv.mse)
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse[[1]]), byrow=TRUE)))
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
View(cv.mse)
View(mse_df)
View(cv.mse)
unlist(cv.mse)
length(unlist(cv.mse))
# create dataframe of cross validation values
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse[[1]]), byrow=TRUE)))
View(mse_df)
# create dataframe of cross validation values
mse_df <- data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE))
View(mse_df)
# create dataframe of cross validation values
mse_df <- data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE))
str(unlist(cv.mse))
class(unlist(cv.mse))
class(c(unlist(cv.mse)))
class(list(unlist(cv.mse)))
# create dataframe of cross validation values
mse_df <- data.frame(matrix(list(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
View(mse_df)
# create dataframe of cross validation values
mse_df <- data.frame(matrix(c(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
View(ridge)
View(mse_df)
# create dataframe of cross validation values
mse_df <- data.frame(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE))
View(mse_df)
matrix(unlist(cv.mse), nrow=length(cv.mse))
matrix(unlist(cv.mse), nrow=5)
matrix(unlist(cv.mse), ncol=8)
matrix(unlist(cv.mse), ncol=8, byrow=TRUE)
matrix(unlist(cv.mse), ncol=8, byrow=FALSE)
matrix(unlist(cv.mse), ncol=8, byrow=TRUE)
?matrix
unlist(cv.mse)
View(cv.mse)
View(models)
mse_df <- data.frame(t(matrix(unlist(cv.mse), nrow=length(cv.mse), byrow=TRUE)))
avg_mse <- rowMeans(mse_df)
mse_df <- cbind(mse_df, avg_mse)
row.names(mse_df) <- c("lasso", "ridge", "enet", "adap lasso", "adap ridge", "adap enet", "scad", "mcp")
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
View(mse_df)
View(test_dat)
?scale
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
cancer <- readRDS("bcTCGA.rds")
cancer[["X"]] <- scale(cancer[["X"]], center = TRUE, scale = TRUE)
cancer_df <- as.data.frame(cbind(cancer[["y"]], cancer[["X"]])) #turn matrix into dataframe
View(cancer_df)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
options(expressions = 5e5)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
hist(cancer[["y"]])
?options
rstudio.exe --max-ppsize=5000000
# Random Forest Grid Search
rf_time <- system.time({
p <- length(train_dat)
rf_hyper_grid <- expand.grid(
mtry       = c(floor(sqrt(p)), floor(p / 3)),  # Predictors per tree
n.trees    = c(300, 500),
OOB_RMSE   = 0
)
# lapply(1:nrow(rf_hyper_grid), function(i) {
#   # train model
#   rf_model <- ranger(
#     formula         = y ~ .,
#     data            = dat,
#     num.trees       = rf_hyper_grid$n.trees[i],
#     mtry            = rf_hyper_grid$mtry[i],
#     min.node.size   = rf_hyper_grid$node_size[i],
#     sample.fraction = rf_hyper_grid$sampe_size[i],
#     seed            = 123
#   )
#
#   # add OOB error to grid
#   rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
# })
for(i in 1:nrow(rf_hyper_grid)) {
# train model
rf_model <- ranger(
formula         = y ~ .,
data            = train_dat,
num.trees       = rf_hyper_grid$n.trees[i],
mtry            = rf_hyper_grid$mtry[i],
min.node.size   = 5,
seed            = 123
)
# add OOB error to grid
rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
}
rf_best_grid <- rf_hyper_grid %>%
dplyr::arrange(OOB_RMSE)
# train best model
best_rf_model <- ranger(
formula         = y ~ .,
data            = train_dat,
num.trees       = rf_best_grid$n.trees[1],
mtry            = rf_best_grid$mtry[1],
min.node.size   = 5,
seed            = 123
)
})
models[[fold]][["rf"]] <- best_rf_model
runtimes[[fold]][["rf"]] <- rf_time
cv.mse[[fold]][["rf"]] <- calc_mse(best_rf_model, test_dat)
library(randomForest)
?randomForest
test_rf <- randomForest(data = train_dat, formula = y ~ .)
test_rf <- randomForest(x = train_dat[,-1], y = train_dat[,1])
View(test_rf)
?ranger
View(cv.mse)
?randomForest
# Random Forest Grid Search
rf_time <- system.time({
p <- length(train_dat)
rf_hyper_grid <- expand.grid(
mtry       = c(floor(sqrt(p)), floor(p / 3)),  # Predictors per tree
n.trees    = c(300, 500),
OOB_RMSE   = 0
)
# lapply(1:nrow(rf_hyper_grid), function(i) {
#   # train model
#   rf_model <- ranger(
#     formula         = y ~ .,
#     data            = dat,
#     num.trees       = rf_hyper_grid$n.trees[i],
#     mtry            = rf_hyper_grid$mtry[i],
#     min.node.size   = rf_hyper_grid$node_size[i],
#     sample.fraction = rf_hyper_grid$sampe_size[i],
#     seed            = 123
#   )
#
#   # add OOB error to grid
#   rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
# })
for(i in 1:nrow(rf_hyper_grid)) {
# train model
rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_hyper_grid$n.trees[i],
mtry            = rf_hyper_grid$mtry[i],
nodesize        = 5
)
# add OOB error to grid
rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
}
rf_best_grid <- rf_hyper_grid %>%
dplyr::arrange(OOB_RMSE)
# train best model
best_rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_best_grid$n.trees[1],
mtry            = rf_best_grid$mtry[1],
nodesize        = 5
)
})
models[[fold]][["rf"]] <- best_rf_model
runtimes[[fold]][["rf"]] <- rf_time
cv.mse[[fold]][["rf"]] <- calc_mse(best_rf_model, test_dat)
# Random Forest Grid Search
rf_time <- system.time({
p <- length(train_dat)
rf_hyper_grid <- expand.grid(
mtry       = c(floor(sqrt(p)), floor(p / 3)),  # Predictors per tree
n.trees    = c(300, 500),
OOB_RMSE   = 0
)
# lapply(1:nrow(rf_hyper_grid), function(i) {
#   # train model
#   rf_model <- ranger(
#     formula         = y ~ .,
#     data            = dat,
#     num.trees       = rf_hyper_grid$n.trees[i],
#     mtry            = rf_hyper_grid$mtry[i],
#     min.node.size   = rf_hyper_grid$node_size[i],
#     sample.fraction = rf_hyper_grid$sampe_size[i],
#     seed            = 123
#   )
#
#   # add OOB error to grid
#   rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
# })
for(i in 1:nrow(rf_hyper_grid)) {
# train model
rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_hyper_grid$n.trees[i],
mtry            = rf_hyper_grid$mtry[i],
nodesize        = 5
)
# add OOB error to grid
rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$mse)
}
rf_best_grid <- rf_hyper_grid %>%
dplyr::arrange(OOB_RMSE)
# train best model
best_rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_best_grid$n.trees[1],
mtry            = rf_best_grid$mtry[1],
nodesize        = 5
)
})
models[[fold]][["rf"]] <- best_rf_model
runtimes[[fold]][["rf"]] <- rf_time
cv.mse[[fold]][["rf"]] <- calc_mse(best_rf_model, test_dat)
rf_model$mse
mean(rf_model$mse)
# Random Forest Grid Search
rf_time <- system.time({
p <- length(train_dat)
rf_hyper_grid <- expand.grid(
mtry       = c(floor(sqrt(p)), floor(p / 3)),  # Predictors per tree
n.trees    = c(300, 500),
OOB_RMSE   = 0
)
# lapply(1:nrow(rf_hyper_grid), function(i) {
#   # train model
#   rf_model <- ranger(
#     formula         = y ~ .,
#     data            = dat,
#     num.trees       = rf_hyper_grid$n.trees[i],
#     mtry            = rf_hyper_grid$mtry[i],
#     min.node.size   = rf_hyper_grid$node_size[i],
#     sample.fraction = rf_hyper_grid$sampe_size[i],
#     seed            = 123
#   )
#
#   # add OOB error to grid
#   rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
# })
for(i in 1:nrow(rf_hyper_grid)) {
# train model
rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_hyper_grid$n.trees[i],
mtry            = rf_hyper_grid$mtry[i],
nodesize        = 5
)
# add OOB error to grid
rf_hyper_grid$OOB_RMSE[i] <- sqrt(mean(rf_model$mse))
}
rf_best_grid <- rf_hyper_grid %>%
dplyr::arrange(OOB_RMSE)
# train best model
best_rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_best_grid$n.trees[1],
mtry            = rf_best_grid$mtry[1],
nodesize        = 5
)
})
models[[fold]][["rf"]] <- best_rf_model
runtimes[[fold]][["rf"]] <- rf_time
cv.mse[[fold]][["rf"]] <- calc_mse(best_rf_model, test_dat)
View(cv.mse)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
memory.limit(size=8000000)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
# Support Vector Machine
svm_time <- system.time({
svm_tune <- tune.svm(y ~ ., data = train_dat,
epsilon = seq(0.1, 0.5, 0.2),
cost = c(0.5, 1, 2)
)
svm_model <- svm_tune$best.model
})
models[[fold]][["svm"]] <- svm_model
runtimes[[fold]][["svm"]] <- svm_time
cv.mse[[fold]][["svm"]] <- calc_mse(svm_model, test_dat)
?svm
svm(y ~ ., data = train_dat,
epsilon = 0.5,
cost = 1
)
