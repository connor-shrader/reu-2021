summary(af)
names(af)
summary(af)
af
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
print(af)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[, str]))
}
a <- lapply(models, get.coef)
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[, str]))
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model$str))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
model.coef <- lapply(models, function(model) model$coefficients)
?sapply
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, coefficients)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
models
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, coefficients)
View(a)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
View(a)
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) print(model$coefficients[str])))
}
a <- sapply(models, coefficients)
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) print(model$coefficients[str]))
}
a <- sapply(models, coefficients)
a
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
a
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
get.coef <- function(model)
{
print(model)
lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
af$coefficients["x1"]
af$coefficients["x2"]
af$coefficients["x3"]
get.coef <- function(model)
{
print(model)
sapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
get.coef <- function(model)
{
print(model)
lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
a
get.coef <- function(model)
{
print(model)
unlist(lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
a
get.coef <- function(model)
{
print(model)
unlist(lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
df <- data.frame(a)
View(df)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
df <- data.frame(a, row.names = row.names)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
df <- data.frame(a)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names, function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
df <- data.frame(a, row.names = row.names)
df
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names, function(str) model$coefficients[str]))
}
df <- data.frame(lapply(models, get.coef), row.names = row.names)
list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
list(af, bf, ab, bb, asf, bsf, asb, bsb)
data()
BOD
?BOD
ggplot(data = BOD)
library(ggplot)
library(tidyverse)
ggplot(data = BOD)
ggplot(data = BOD,)
ggplot(data = BOD,
mapping = aes(x = Time,))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand)) +
geom_point()
geom_point(size = 5)
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand)) +
geom_point(size = 5) +
geom_line(colour = "red")
ggplot(BOD, aes(Time, demand))+
geom_point(size = 3)+
geom_line(colour = "red")
models <- list(fm = fm, nm = nm, af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf,
asb = asb, bsb = bsb, scad = scad, mcp = mcp)
models <- list(fm)
models$fm
source('~/github/reu-2021/code/variable-selection/monte-carlo.r', echo=TRUE)
models <- list(fm)
models$fm
models[1]
models <- list(fm = fm)
models[1]
coef(fm)
coef(ab)
unlist(lapply(row.names, function(predictor) coef(ab)[predictor]))
View(df)
df[true] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
p <- 10
df[true] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
df["true"] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
# Sets all zero coefficients to NA (this makes it easier to read).
df[is.na(df)] <- 0
scad <- cv.ncvreg(X = ex.dat[, -1], y = ex.dat$y, penalty = "SCAD")
coef(scad)
?system.time
library(dplyr)
multi.merge <-function(model_list, col_names){ #takes input of list of lm models, and vector of column names
for (i in 1:length(model_list)){
model_list[[i]] <- data.frame(as.matrix(coef(model_list[[i]]))) #turns lm model class into dataframe of coefficients
model_list[[i]]$betas <- row.names(model_list[[i]]) #adds column of beta coefficient names
}
# ugly code to rearrange order of beta column and full model column
full_df <- model_list[[1]]
full_df <- full_df[-1]
full_df$fm <- model_list[[1]][[1]]
for (i in 2:length(model_list)){
full_df <- left_join(full_df, model_list[[i]], by = "betas") #joins code together by beta coefficient name
}
full_df[is.na(full_df)] <- 0
colnames(full_df) <- c("betas", col_names) #renames columns according to what was input to the function
return(full_df)
}
coefs_df <- multi.merge(list(fm, af, bf, ab, bb, asf, bsf, asb, bsb, mcp, scad, lasso, ridge, enet),
c("fm", "af", "bf", "ab", "bb", "asf", "bsf", "asb", "bsb", "mcp", "scad", "lasso", "ridge", "elastic_net"))
names(lasso)
coef(lasso)
coef(mcp)
coef(scad)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
res <- run_simulations(indices = 270, iterations = 100)
?file.exists
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
debugSource('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(results)
debugSource('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
q
debugSource('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(all_res)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(all_res)
?do.call
t <- as.data.frame(all_res)
View(t)
t <- do.call(rbind, all_res)
View(t)
class(t)
u <- as.data.frame(t)
View(u)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(all_res)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(all_res)
?rbind
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(all_res)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(all_res)
View(all_res)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
run_simulations(indices = 1, iterations = 1)
x <- readRDS("../../results/monte-carlo-test/sim_results_50_10_1_independent_0.rds")
View(x)
run_simulations(indices = 4, iterations = 1)
x <- readRDS("../../results/monte-carlo-test/sim_results_50_100_1_independent_0.rds")
View(x)
View(x[[1]][["coefficients"]])
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(all_res)
x <- readRDS("../../results/monte-carlo-test/sim_results_50_100_1_independent_0.rds")
View(x)
View(x[[1]][["coefficients"]])
x <- readRDS("../../results/monte-carlo/sim_results_200_100_1_independent_0.rds")
View(x)
?cbind
for (i in 1:9) {
row <- parameters[i, ]
n <- row$n
p <- row$p
st_dev <- row$sigma
# Convert row$covar (which is a factor) to a character.
type <- as.character(row$covar)
corr <- row$rho
original_filename <- paste("../../results/monte-carlo/sim_results_",
n, "_",
p, "_",
st_dev, "_",
type, "_",
corr, ".rds", sep = "")
if (file.exists(original_filename)) {
results <<- readRDS(original_filename)
if (n == 200 & p == 100) {
for (i in 1:1) {
set.seed(i)
# Set coefficient values. If beta is NULL, default values are used. Otherwise,
# beta is extended/shortened to have length (p + 1).
beta <- generate_coefficients(NULL, p)
# Generate training and test data.
train_data <- generate_data(n = n, p = p, ...)
test_data <- generate_data(n = n, p = p, ...)
models <- list()
runtimes <- list()
# Full model
fm_time <- system.time(fm <- lm(y ~ ., data = dat))
models[["fm"]] <- fm
runtimes[["fm"]] <- fm_time
# AIC and BIC model selection for forward
af_time <- system.time(af <-  stepAIC(nm, scope=list(lower=nm, upper=fm),
direction="forward", k=2, trace=F,
steps=3000)) #AIC
models[["af"]] <- af
runtimes[["af"]] <- af_time
bf_time <- system.time(bf <-  stepAIC(nm, scope=list(lower=nm, upper=fm),
direction="forward", k=log(nrow(dat)),
trace=F, steps=3000)) #BIC
models[["bf"]] <- bf
runtimes[["bf"]] <- bf_time
# AIC and BIC model selection for stepwise forward
asf_time <- system.time(asf <-  stepAIC(nm, scope=list(lower=nm, upper=fm),
direction="both", k=2, trace=F,
steps=3000)) #AIC
models[["asf"]] <- asf
runtimes[["asf"]] <- asf_time
bsf_time <- system.time(bsf <-  stepAIC(nm, scope=list(lower=nm, upper=fm),
direction="both", k=log(nrow(dat)),
trace=F, steps=3000)) #BIC
models[["bsf"]] <- bsf
runtimes[["bsf"]] <- bsf_time
# Generate the coefficient table and compute the mean squared error
# for each model.
coefficients_table2 <- results_table(models, beta = beta, p = p)
# Compute training and test MSE.
train_mse2 <- lapply(models, mean_squared_error, dat = train_data)
test_mse2 <- lapply(models, mean_squared_error, dat = test_data)
results[[i]]$coefficients <- cbind(results[[i]]$coefficients, coefficients_table2)
}
}
}
}
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
View(results)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
View(results)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
View(results)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
View(results)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
results <- monte_carlo(n = 200,
p = 100,
iterations = 1,
st_dev = 1,
type = independent",
corr = 1)
res <- monte_carlo(n = 200, p = 100, iterations = 1, st_dev = 1, type = "independent")
View(res)
source("simulation-test.r")
res <- monte_carlo(n = 200, p = 100, iterations = 1, st_dev = 1, type = "independent")
View(res)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
View(results)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
View(results)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
View(results)
source("simulation.r")
res1 <- monte_carlo(n = 50, p = 10, iterations = 1)
res1 <- monte_carlo(n = 50, p = 10, iterations = 1, st_dev = 1)
source("simulation-test.r")
res2 <- monte_carlo(n = 50, p = 10, iterations = 1, st_dev = 1)
View(res1)
View(res2)
source("simulation.r")
res1 <- monte_carlo(n = 200, p = 100, iterations = 1, st_dev = 1)
source("simulation-test.r")
res2 <- monte_carlo(n = 200, p = 100, iterations = 1, st_dev = 1)
View(res1)
View(res2)
source("simulation-test.r")
source("simulation-test.r")
res3 <- monte_carlo(n = 200, p = 100, iterations = 1, st_dev = 1)
View(res3)
View(res2[[1]][["coefficients"]])
source("simulation-test.r")
res4 <- monte_carlo(n = 50, p = 100, iterations = 1, st_dev = 1)
View(res4)
View(res4[[1]][["coefficients"]])
source("simulation.r")
res1 <- monte_carlo(n = 200, p = 100, iterations = 1, st_dev = 1)
source("simulation-test.r")
res2 <- monte_carlo(n = 200, p = 100, iterations = 1, st_dev = 1)
View(res2)
View(res1)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
res <- run_simulations(indices = 1:8, iterations = 3)
source('~/github/reu-2021/code/monte-carlo/perform-simulations-test.r', echo=TRUE)
res <- run_simulations(indices = 1:8, iterations = 3)
d1 <- readRDS("../../results/monte-carlo/sim_results_50_10_1_independent_0.rds")
d2 <- readRDS("../../results/monte-carlo-test/sim_results_50_10_1_independent_0.rds")
d3 <- readRDS("../../results/monte-carlo-test2/sim_results_50_10_1_independent_0.rds")
View(d1)
View(d2)
View(d3)
d3 <- readRDS("../../results/monte-carlo-test2/sim_results_50_2000_1_independent_0.rds")
d2 <- readRDS("../../results/monte-carlo-test/sim_results_50_2000_1_independent_0.rds")
d1 <- readRDS("../../results/monte-carlo/sim_results_50_2000_1_independent_0.rds")
View(d1)
View(d2)
View(d3)
d1 <- readRDS("../../results/monte-carlo/sim_results_200_100_1_independent_0.rds")
d2 <- readRDS("../../results/monte-carlo-test/sim_results_200_100_1_independent_0.rds")
d3 <- readRDS("../../results/monte-carlo-test2/sim_results_200_100_1_independent_0.rds")
View(d1)
View(d2)
View(d3)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
res <- run_simulations(indices = 1, iterations = 10)
t <- readRDS("../../results/monte-carlo/sim_results_50_10_1_independent_0.rds")
View(res)
View(t)
s <- readRDS("../../results/sim_results_50_10_1_independent_0.rds")
View(s)
