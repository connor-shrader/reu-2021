{
summary(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(summary(model))
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
summary(af)
names(af)
summary(af)
af
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
print(af)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[, str]))
}
a <- lapply(models, get.coef)
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[, str]))
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model$str))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
model.coef <- lapply(models, function(model) model$coefficients)
?sapply
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, coefficients)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
models
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, coefficients)
View(a)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
View(a)
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) print(model$coefficients[str])))
}
a <- sapply(models, coefficients)
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) print(model$coefficients[str]))
}
a <- sapply(models, coefficients)
a
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
a
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
get.coef <- function(model)
{
print(model)
lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
af$coefficients["x1"]
af$coefficients["x2"]
af$coefficients["x3"]
get.coef <- function(model)
{
print(model)
sapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
get.coef <- function(model)
{
print(model)
lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
a
get.coef <- function(model)
{
print(model)
unlist(lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
a
get.coef <- function(model)
{
print(model)
unlist(lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
df <- data.frame(a)
View(df)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
df <- data.frame(a, row.names = row.names)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
df <- data.frame(a)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names, function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
df <- data.frame(a, row.names = row.names)
df
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names, function(str) model$coefficients[str]))
}
df <- data.frame(lapply(models, get.coef), row.names = row.names)
list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
list(af, bf, ab, bb, asf, bsf, asb, bsb)
data()
BOD
?BOD
ggplot(data = BOD)
library(ggplot)
library(tidyverse)
ggplot(data = BOD)
ggplot(data = BOD,)
ggplot(data = BOD,
mapping = aes(x = Time,))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand)) +
geom_point()
geom_point(size = 5)
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand)) +
geom_point(size = 5) +
geom_line(colour = "red")
ggplot(BOD, aes(Time, demand))+
geom_point(size = 3)+
geom_line(colour = "red")
models <- list(fm = fm, nm = nm, af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf,
asb = asb, bsb = bsb, scad = scad, mcp = mcp)
models <- list(fm)
models$fm
source('~/github/reu-2021/code/variable-selection/monte-carlo.r', echo=TRUE)
models <- list(fm)
models$fm
models[1]
models <- list(fm = fm)
models[1]
coef(fm)
coef(ab)
unlist(lapply(row.names, function(predictor) coef(ab)[predictor]))
View(df)
df[true] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
p <- 10
df[true] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
df["true"] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
# Sets all zero coefficients to NA (this makes it easier to read).
df[is.na(df)] <- 0
scad <- cv.ncvreg(X = ex.dat[, -1], y = ex.dat$y, penalty = "SCAD")
coef(scad)
?system.time
library(dplyr)
multi.merge <-function(model_list, col_names){ #takes input of list of lm models, and vector of column names
for (i in 1:length(model_list)){
model_list[[i]] <- data.frame(as.matrix(coef(model_list[[i]]))) #turns lm model class into dataframe of coefficients
model_list[[i]]$betas <- row.names(model_list[[i]]) #adds column of beta coefficient names
}
# ugly code to rearrange order of beta column and full model column
full_df <- model_list[[1]]
full_df <- full_df[-1]
full_df$fm <- model_list[[1]][[1]]
for (i in 2:length(model_list)){
full_df <- left_join(full_df, model_list[[i]], by = "betas") #joins code together by beta coefficient name
}
full_df[is.na(full_df)] <- 0
colnames(full_df) <- c("betas", col_names) #renames columns according to what was input to the function
return(full_df)
}
coefs_df <- multi.merge(list(fm, af, bf, ab, bb, asf, bsf, asb, bsb, mcp, scad, lasso, ridge, enet),
c("fm", "af", "bf", "ab", "bb", "asf", "bsf", "asb", "bsb", "mcp", "scad", "lasso", "ridge", "elastic_net"))
names(lasso)
coef(lasso)
coef(mcp)
coef(scad)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?geom_text
?plotmath
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?annotate
?geom_text
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?par
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?geom_contour
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
2
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?geom_circle
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?ggsave
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
bdiag((kronecker(diag(p1%/%s1),sigma*((1-rho)*diag(s1) + matrix(rep(rho, s1*s1),s1)))),sigma*sigma*((1-rho)*diag(p1%%s1) + matrix(rep(rho, p1%%s1*p1%%s1),p1%%s1)))
?kronecker
?diag
x <- matrix(rep(1, 0.5, 0.5, 0.5, length = 9))
x <- matrix(rep(1, 0.5, 0.5, 0.5, length.out = 9))
?rep
x <- matrix(rep(c(1, 0.5, 0.5, 0.5), length.out = 9))
x
x <- matrix(rep(c(1, 0.5, 0.5, 0.5), length.out = 9), nrow = 3)
x
y <- kronecker(diag(3), matrix(rep(c(1, 0.5, 0.5, 0.5), length.out = 9), nrow = 3, ncol = 3))
y
# monte-carlo.r
# Gabe Ackall, Seongtae Kim, Connor Shrader
# This file contains everything to be executed using the functions from
# simulation.r and metrics.r.
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
error_var = 1
)
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
source("simulation.r")
source("metrics.r")
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
source("simulation.r")
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
source("simulation.r")
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
?rep
source("simulation.r")
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
source("simulation.r")
source("metrics.r")
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
source("simulation.r")
source("metrics.r")
dat <- monte_carlo(n = 100,
p = 10,
iterations = 5,
type = "blockwise",
corr = 0.5,
error_var = 1
)
View(dat)
dat <- monte_carlo(n = 1000,
p = 100,
iterations = 1,
type = "blockwise",
corr = 0.9,
error_var = 1
)
source("simulation.r")
dat <- monte_carlo(n = 1000,
p = 100,
iterations = 1,
type = "blockwise",
corr = 0.9,
error_var = 1
)
View(dat)
dat <- monte_carlo(n = 200,
p = 500,
iterations = 1,
type = "blockwise",
corr = 0.9,
error_var = 1
)
dat <- monte_carlo(n = 200,
p = 500,
iterations = 1,
type = "autoregressive",
corr = 0.9,
error_var = 1,
)
View(dat)
View(dat[[1]][["coefficients"]])
source("metrics.r")
dat <- monte_carlo(n = 200,
p = 500,
iterations = 1,
type = "autoregressive",
corr = 0.9,
error_var = 1,
)
View(dat)
