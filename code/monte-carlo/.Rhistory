setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
res <- monte_carlo(n = 100, p = 10, iterations = 5, type = "independent", corr = 1)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
res <- monte_carlo(n = 100, p = 10, iterations = 5, type = "independent", corr = 1)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
res <- monte_carlo(n = 100, p = 10, iterations = 5, type = "independent", corr = 1)
View(res)
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
library(rstudioapi)
library(h2o)
library(bit64)
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
res <- monte_carlo(n = 100, p = 10, iterations = 5, type = "independent", corr = 1)
View(res)
dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
)
View(dat)
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
library(rstudioapi)
library(h2o)
library(bit64)
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
)
View(ex_y_hat)
?corr
?corresp
corresp(ex_y_hat, ex_y_dat)
cor(ex_y_hat, ex_y_dat)
ex_y_dat[20]
ex_y_dat[18]
ex_y_dat[21]
ex_y_dat[11]
ex_y_dat[13]
ex_y_dat[12]
ex_y_dat[87]
?ranger
dat <- monte_carlo(n = 100,
p = 10,
type = "symmetric",
corr = 0.5,
sd = 1,
iterations = 1,
seed = 1
)
View(dat)
dat <- monte_carlo(n = 500,
p = 20,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
)
View(dat)
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
# Used to set the current working directory to this script.
library(rstudioapi)
library(bit64)
# Used for XGBoost models.
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 5,
seed = 1
)
View(dat)
system.time(dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
res <- monte_carlo(n = 100, p = 10, iterations = 5, type = "independent", corr = 1)
source('~/NSFREU/reu-2021/code/monte-carlo/run.r', echo=TRUE)
system.time(dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
system.time(dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
# Used to set the current working directory to this script.
library(rstudioapi)
library(bit64)
# Used for XGBoost models.
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
View(dat)
system.time(dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
View(dat)
R.version
install.packages("installr")
library(installr)
updateR()
R.version
R.version
R.version
install.packages("tidyverse")
install.packages("dplyr")
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
# Used to set the current working directory to this script.
library(rstudioapi)
library(bit64)
# Used for XGBoost models.
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
#random_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#models <- fit_models(dat = random_data, n = 100, p = 10)
#test_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#lasso_pred <- predict(models$lasso, as.matrix(test_data[, -1]))
#lasso_eval <- data.frame(lasso_pred, test_data[, 1])
#lasso_mse <- 1/100 * sum((lasso_eval[, 1] - lasso_eval[, 2])^2)
#rf_pred <- h2o.performance(models$rf, newdata = as.h2o(test_data))
#rf_pred <- as.data.frame(predict(object = models$rf, newdata = as.h2o(test_data[, -1])))
#rf_eval <- data.frame(rf_pred, test_data[, 1])
#rf_mse <- 1/100 * sum((rf_eval[, 1] - rf_eval[, 2])^2)
#rf_eval[3] <- lasso_eval[1]
#colnames(rf_eval) <- c("rf", "true", "lasso")
system.time(dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
source("simulation.r")
source("metrics.r")
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
# Used to set the current working directory to this script.
library(rstudioapi)
library(bit64)
# Used for XGBoost models.
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
install.packages("tidyverse")
R.version
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
# Used to set the current working directory to this script.
library(rstudioapi)
library(bit64)
# Used for XGBoost models.
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
install.packages("stringi")
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
# Used to set the current working directory to this script.
library(rstudioapi)
library(bit64)
# Used for XGBoost models.
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
#random_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#models <- fit_models(dat = random_data, n = 100, p = 10)
#test_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#lasso_pred <- predict(models$lasso, as.matrix(test_data[, -1]))
#lasso_eval <- data.frame(lasso_pred, test_data[, 1])
#lasso_mse <- 1/100 * sum((lasso_eval[, 1] - lasso_eval[, 2])^2)
#rf_pred <- h2o.performance(models$rf, newdata = as.h2o(test_data))
#rf_pred <- as.data.frame(predict(object = models$rf, newdata = as.h2o(test_data[, -1])))
#rf_eval <- data.frame(rf_pred, test_data[, 1])
#rf_mse <- 1/100 * sum((rf_eval[, 1] - rf_eval[, 2])^2)
#rf_eval[3] <- lasso_eval[1]
#colnames(rf_eval) <- c("rf", "true", "lasso")
system.time(dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
install.packages("e1071")
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
library(MASS) # v7.3-54
library(caret)
# Used to set the current working directory to this script.
library(rstudioapi)
library(bit64)
# Used for XGBoost models.
library(xgboost)
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
#random_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#models <- fit_models(dat = random_data, n = 100, p = 10)
#test_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#lasso_pred <- predict(models$lasso, as.matrix(test_data[, -1]))
#lasso_eval <- data.frame(lasso_pred, test_data[, 1])
#lasso_mse <- 1/100 * sum((lasso_eval[, 1] - lasso_eval[, 2])^2)
#rf_pred <- h2o.performance(models$rf, newdata = as.h2o(test_data))
#rf_pred <- as.data.frame(predict(object = models$rf, newdata = as.h2o(test_data[, -1])))
#rf_eval <- data.frame(rf_pred, test_data[, 1])
#rf_mse <- 1/100 * sum((rf_eval[, 1] - rf_eval[, 2])^2)
#rf_eval[3] <- lasso_eval[1]
#colnames(rf_eval) <- c("rf", "true", "lasso")
system.time(dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
# monte-carlo.r
# Gabe Ackall, Seongtae Kim, Connor Shrader
# This file contains everything to be executed using the functions from
# simulation.r and metrics.r.
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
# Used for stepwise selection.
library(MASS) # v7.3-54
# Used for confusion matrices.
library(caret) # v6.0-88
# Used to set the current working directory to this script.
library(rstudioapi) # v0.13
library(bit64) # v4.0.5
# Used for XGBoost models.
library(xgboost) # v1.4.1.1
# Used for random forest models.
library(ranger) # v0.12.1
# Support vector machine model
library(e1071) # v1.7-7
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
#random_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#models <- fit_models(dat = random_data, n = 100, p = 10)
#test_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#lasso_pred <- predict(models$lasso, as.matrix(test_data[, -1]))
#lasso_eval <- data.frame(lasso_pred, test_data[, 1])
#lasso_mse <- 1/100 * sum((lasso_eval[, 1] - lasso_eval[, 2])^2)
#rf_pred <- h2o.performance(models$rf, newdata = as.h2o(test_data))
#rf_pred <- as.data.frame(predict(object = models$rf, newdata = as.h2o(test_data[, -1])))
#rf_eval <- data.frame(rf_pred, test_data[, 1])
#rf_mse <- 1/100 * sum((rf_eval[, 1] - rf_eval[, 2])^2)
#rf_eval[3] <- lasso_eval[1]
#colnames(rf_eval) <- c("rf", "true", "lasso")
system.time(dat <- monte_carlo(n = 1000,
p = 100,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
View(dat)
# monte-carlo.r
# Gabe Ackall, Seongtae Kim, Connor Shrader
# This file contains everything to be executed using the functions from
# simulation.r and metrics.r.
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
# Used for stepwise selection.
library(MASS) # v7.3-54
# Used for confusion matrices.
library(caret) # v6.0-88
# Used to set the current working directory to this script.
library(rstudioapi) # v0.13
library(bit64) # v4.0.5
# Used for XGBoost models.
library(xgboost) # v1.4.1.1
# Used for random forest models.
library(ranger) # v0.12.1
# Support vector machine model
library(e1071) # v1.7-7
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
#random_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#models <- fit_models(dat = random_data, n = 100, p = 10)
#test_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#lasso_pred <- predict(models$lasso, as.matrix(test_data[, -1]))
#lasso_eval <- data.frame(lasso_pred, test_data[, 1])
#lasso_mse <- 1/100 * sum((lasso_eval[, 1] - lasso_eval[, 2])^2)
#rf_pred <- h2o.performance(models$rf, newdata = as.h2o(test_data))
#rf_pred <- as.data.frame(predict(object = models$rf, newdata = as.h2o(test_data[, -1])))
#rf_eval <- data.frame(rf_pred, test_data[, 1])
#rf_mse <- 1/100 * sum((rf_eval[, 1] - rf_eval[, 2])^2)
#rf_eval[3] <- lasso_eval[1]
#colnames(rf_eval) <- c("rf", "true", "lasso")
system.time(dat <- monte_carlo(n = 1000,
p = 100,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
# monte-carlo.r
# Gabe Ackall, Seongtae Kim, Connor Shrader
# This file contains everything to be executed using the functions from
# simulation.r and metrics.r.
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
# Used for stepwise selection.
library(MASS) # v7.3-54
# Used for confusion matrices.
library(caret) # v6.0-88
# Used to set the current working directory to this script.
library(rstudioapi) # v0.13
library(bit64) # v4.0.5
# Used for XGBoost models.
library(xgboost) # v1.4.1.1
# Used for random forest models.
library(ranger) # v0.12.1
# Support vector machine model
library(e1071) # v1.7-7
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
#random_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#models <- fit_models(dat = random_data, n = 100, p = 10)
#test_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#lasso_pred <- predict(models$lasso, as.matrix(test_data[, -1]))
#lasso_eval <- data.frame(lasso_pred, test_data[, 1])
#lasso_mse <- 1/100 * sum((lasso_eval[, 1] - lasso_eval[, 2])^2)
#rf_pred <- h2o.performance(models$rf, newdata = as.h2o(test_data))
#rf_pred <- as.data.frame(predict(object = models$rf, newdata = as.h2o(test_data[, -1])))
#rf_eval <- data.frame(rf_pred, test_data[, 1])
#rf_mse <- 1/100 * sum((rf_eval[, 1] - rf_eval[, 2])^2)
#rf_eval[3] <- lasso_eval[1]
#colnames(rf_eval) <- c("rf", "true", "lasso")
system.time(dat <- monte_carlo(n = 1000,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
# monte-carlo.r
# Gabe Ackall, Seongtae Kim, Connor Shrader
# This file contains everything to be executed using the functions from
# simulation.r and metrics.r.
# R version: 4.1.0
library(tidyverse) # v1.3.1
library(dplyr) # v1.0.6
library(faux) # v1.0.0
library(ncvreg) # v3.13.0
library(glmnet) # v4.1-1
# Used for stepwise selection.
library(MASS) # v7.3-54
# Used for confusion matrices.
library(caret) # v6.0-88
# Used to set the current working directory to this script.
library(rstudioapi) # v0.13
library(bit64) # v4.0.5
# Used for XGBoost models.
library(xgboost) # v1.4.1.1
# Used for random forest models.
library(ranger) # v0.12.1
# Support vector machine model
library(e1071) # v1.7-7
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
#random_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#models <- fit_models(dat = random_data, n = 100, p = 10)
#test_data <- generate_data(seed = 1, n = 100, p = 10, corr = 0, type = "independent")
#lasso_pred <- predict(models$lasso, as.matrix(test_data[, -1]))
#lasso_eval <- data.frame(lasso_pred, test_data[, 1])
#lasso_mse <- 1/100 * sum((lasso_eval[, 1] - lasso_eval[, 2])^2)
#rf_pred <- h2o.performance(models$rf, newdata = as.h2o(test_data))
#rf_pred <- as.data.frame(predict(object = models$rf, newdata = as.h2o(test_data[, -1])))
#rf_eval <- data.frame(rf_pred, test_data[, 1])
#rf_mse <- 1/100 * sum((rf_eval[, 1] - rf_eval[, 2])^2)
#rf_eval[3] <- lasso_eval[1]
#colnames(rf_eval) <- c("rf", "true", "lasso")
system.time(dat <- monte_carlo(n = 100,
p = 10,
type = "independent",
corr = 0,
sd = 1,
iterations = 1,
seed = 1
))
