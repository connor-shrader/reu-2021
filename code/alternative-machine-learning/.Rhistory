source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
View(data_train)
View(data_test)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
View(data_train)
View(data_test)
View(data_train)
View(data_test)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
View(boston_ANN1)
?neuralnet
plot(boston_ANN1, rep = 'best')
# 1 Layer Neural Net
boston_ANN1 <- neuralnet(medv ~ ., data = data_train, hidden = 3)
# 1 Layer Neural Net
boston_ANN1 <- neuralnet(medv ~ ., data = data_train, hidden = 3)
plot(boston_ANN1, rep = "best")
ANN1_mse <- mean((data_test[,"medv"] - predict(boston_ANN1, data_test[,-length(data_test)])) ^ 2)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/alternative-models.R', echo=TRUE)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
plot(boston_ANN4)
# import required packages
library(MASS) #includes databases
library(randomForest) #Random Forest model
library(gbm) #gradient boosting model
library(xgboost) #xgboost model
library(e1071) #support vector machine model
?randomForest
?svm
source('~/NSFREU/reu-2021/code/alternative-machine-learning/artificial-neural-net.R', echo=TRUE)
install.packages("rpart")
install.packages("rpart.plot")
source('~/NSFREU/reu-2021/code/alternative-machine-learning/alternative-models.R', echo=TRUE)
?rpart.plot
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray")
?rpart
source('~/NSFREU/reu-2021/code/alternative-machine-learning/alternative-models.R', echo=TRUE)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray")
# Decision tree model
tree <- rpart(medv ~ . ,data = Boston[train,], method = "anova") #anova method means to do regression
View(tree)
rf_mse <- mean((data_test[,"medv"] - predict(rf, data_test[,-length(data_test)])) ^ 2)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray")
tree_mse <- mean((test_y_data - predict(tree, test_x_data)) ^ 2)
tree_mse <- mean((test_y_data - predict(tree, as.data.frame(test_x_data))) ^ 2)
?rpart.plot
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="auto", shadow.col=0)
plot(tree)
print(tree)
tree
tree
tree
summary(tree)
plot(fit, uniform = TRUE)
plot(tree, uniform = TRUE)
text(tree, use.n = TRUE, cex = .7)
plot(tree, uniform = TRUE)
text(tree, use.n = TRUE, cex = .7)
text(tree, use.n = TRUE, cex = .7)
plot(tree, uniform = TRUE)
text(tree, use.n = TRUE, cex = .7)
plot(tree, uniform = TRUE)
text(tree, use.n = TRUE, cex = .7)
head(Boston)
?Boston
predict(tree, as.data.frame(test_x_data))[1,:])
predict(tree, as.data.frame(test_x_data)[1,:])
predict(tree, as.data.frame(test_x_data)[1,])
as.datatext_x_data[1,]
test_x_data[1,]
view(test_x_data[1,])
View(test_x_data[1,])
test_y_data[1]
