#grid_id = "gbm_grid3",
y = "medv",
training_frame = as.h2o(Boston[train, ]),
validation_frame = as.h2o(Boston[-train,]),
hyper_params = hyper_grid,
search_criteria = gdm_search_criteria,
ntrees = 5000,
stopping_rounds = 10,
stopping_tolerance = 0,
seed = 123
)
# collect the results and sort by our model performance metric of choice
gdm_grid_perf <- h2o.getGrid(
grid_id = h2o.getId(grid),
sort_by = "mse",
decreasing = FALSE
)
#gdm_grid_perf
# Grab the model_id for the top model, chosen by validation error
gdm_best_model_id <- gdm_grid_perf@model_ids[[1]]
gdm_best_model <- h2o.getModel(gdm_best_model_id)
# performance metrics on the best model
gdm_best_model_perf <- h2o.performance(model = gdm_best_model, valid = TRUE, newdata = as.h2o(Boston[-train,]))
?h2o.getGrid
grid@grid_id
# GDM H2O
# create hyperparameter grid
hyper_grid <- list(
max_depth = c(1, 3, 5),
min_rows = c(1, 5, 10)#,
#learn_rate = c(0.01, 0.05, 0.1),
#learn_rate_annealing = c(.99, 1),
#sample_rate = c(.5, .75, 1),
#col_sample_rate = c(.8, .9, 1)
)
gdm_search_criteria <- list(
strategy = "RandomDiscrete",
stopping_metric = "mse",
stopping_tolerance = 0.005,
stopping_rounds = 10,
max_runtime_secs = 60*60
)
# perform grid search for gdm
grid <- h2o.grid(
algorithm = "gbm",
#grid_id = "gbm_grid3",
y = "medv",
training_frame = as.h2o(Boston[train, ]),
validation_frame = as.h2o(Boston[-train,]),
hyper_params = hyper_grid,
search_criteria = gdm_search_criteria,
ntrees = 5000,
stopping_rounds = 10,
stopping_tolerance = 0,
seed = 123
)
# collect the results and sort by our model performance metric of choice
gdm_grid_perf <- h2o.getGrid(
grid_id = grid@grid_id,
sort_by = "mse",
decreasing = FALSE
)
# Grab the model_id for the top model, chosen by validation error
gdm_best_model_id <- gdm_grid_perf@model_ids[[1]]
gdm_best_model <- h2o.getModel(gdm_best_model_id)
# performance metrics on the best model
gdm_best_model_perf <- h2o.performance(model = gdm_best_model, valid = TRUE, newdata = as.h2o(Boston[-train,]))
gdm_grid_perf
predict(gdm_best_model, newdata = as.h2o(Boston[-train,]))
source('~/NSFREU/reu-2021/code/alternative-machine-learning/alternative-models.R', echo=TRUE)
?h2o.grid
?svm
svm_fit <- function(kernel, formula, data){
svm_mod <- svm(formula, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
sum <- "test"
}
svm_grid <- function(formula, data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, formula = formula, data = data)
}
svm_grid(medv~., data = Boston[train,])
svm_fit <- function(kernel, formula, data){
svm_mod <- svm(formula, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
sum <- "test"
}
svm_grid <- function(formula, data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, formula = formula, data = data)
}
svm_grid(medv~., data = Boston[train,])
models <- svm_grid(medv~., data = Boston[train,])
models
equation_test <- y~.
svm_model$terms
svm_model$call
svm_model$type
svm_model$terms$predvars
svm_model$terms
svm_model$terms[["predvars"]]
svm_model$terms["predvars"]
list(svm_model$terms)["predvars"]
list(svm_model$terms)
attr(svm_model$terms, "predvars")
attr(svm_model$terms, "predvars")$medv
attr(svm_model$terms, "predvars")[[3]]
attr(svm_model$terms, "predvars")[["crim"]]
attr(svm_model$terms, "predvars")[[crim]]
attr(svm_model$terms, "variables")
attr(svm_model$terms, "term.labels")
attr(svm_model$terms, "term.labels")["crim"]
data.class(attr(svm_model$terms, "term.labels"))
type(attr(svm_model$terms, "term.labels"))
class(attr(svm_model$terms, "term.labels"))
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,columns[2:length(columns)]] #separate test x and y data
test_y <- test_data[,columns[1]]
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- sum(test_y - predicted_y) / length(test_y) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
models <- svm_grid(medv~., data = Boston[train,])
models <- svm_grid(medv~., data = Boston[train,])
models <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
Boston[-train, ]
Boston[-train, ][["crim"]]
Boston[-train, ]["crim"]
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,columns[2:length(columns)]] #separate test x and y data
print(test_x)
test_y <- test_data[,columns[1]]
print(test_y)
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- sum(test_y - predicted_y) / length(test_y) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
models <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
models <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
attr(svm_model$terms, "term.labels")
attr(svm_model$terms, "term.labels")[2:length(attr(svm_model$terms, "term.labels"))]
attr(svm_model$terms, "term.labels")
svm_model$terms
attr(svm_model$terms, variables)
attr(svm_model$terms, "variables")
attr(svm_model$terms, "variables")[1]
attr(svm_model$terms, "variables")[[1]]
attr(svm_model$terms, "variables")[1][1]
attr(svm_model$terms, "variables")[[1]][1]
attr(svm_model$terms, "variables")[medv]
attr(svm_model$terms, "variables")["medv"
attr(svm_model$terms, "variables")["medv"]
attr(svm_model$terms, "variables")["medv"]
attr(svm_model$terms, "variables")[medv]
attr(svm_model$terms, "variables")[[medv]]
attr(svm_model$terms, "variables")
list(attr(svm_model$terms, "variables"))
svm_model$labels
svm_model$index
svm_model$fitted
svm_model$terms
svm_model$terms[[1]]
svm_model$terms[1]
svm_model$terms[,1]
svm_model$terms[1]
svm_model$formula
svm_model$terms
attr(svm_model$terms, "Environment")
attr(svm_model$terms, ".Environment")
rf$formula
svm_model$terms
attr(svm_model$terms, "formula")
attr(svm_model$terms, "~a")
attr(svm_model$terms, "~")
attr(svm_model$terms, ~)
attr(svm_model$terms, ~)
svm_model$terms$~
?svm_model$terms
list(svm_model$terms)
as.list(svm_model$terms)
as.list(svm_model$terms)[[1]]
as.list(svm_model$terms)[1]
svm_model$terms['~']
svm_model$terms[[~]]
svm_model$terms[["~"]]
as.list(svm_model$terms)[[2]]
?chr
?str
?character
?string
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
print(test_x)
test_y <- test_data[string(as.list(svm_model$terms)[[2]])]
print(test_y)
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- sum(test_y - predicted_y) / length(test_y) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
models <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
?string
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
print(test_x)
test_y <- test_data[toString(as.list(svm_model$terms)[[2]])]
print(test_y)
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- sum(test_y - predicted_y) / length(test_y) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
models <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
View(models)
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- test_data[toString(as.list(svm_model$terms)[[2]])]
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- sum(test_y - predicted_y) / length(test_y) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
grid_svm <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
grid_svm
calc_mse(svm_grid, Boston[-train,])
calc_mse(grid_svm, Boston[-train,])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- test_data[toString(as.list(svm_model$terms)[[2]])]
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- sum(test_y - predicted_y) / length(test_y) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
calc_mse(grid_svm_model, Boston[-train,])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- test_data[toString(as.list(svm_model$terms)[[2]])]
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- sum(test_y - predicted_y) / length(test_y) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
print(mse_list)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- test_data[toString(as.list(svm_model$terms)[[2]])]
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- sum((test_y - predicted_y) ^ 2) / length(test_y) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
print(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- test_data[toString(as.list(svm_model$terms)[[2]])]
predicted_y <- predict(model, newdata = test_x) #predict new y values
mse <- mean((test_y - predicted_y) ^ 2)) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
print(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- test_data[toString(as.list(svm_model$terms)[[2]])]
predicted_y <- predict(model, newdata = test_x) #predict new y values
print(predicted_y)
mse <- mean((test_y - predicted_y) ^ 2)) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
print(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- test_data[toString(as.list(svm_model$terms)[[2]])]
predicted_y <- predict(model, newdata = test_x) #predict new y values
print(predicted_y)
mse <- mean((test_y - predicted_y) ^ 2) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
print(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
?chr
?as.vector
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- as.vector(test_data[toString(as.list(svm_model$terms)[[2]])])
predicted_y <- as.vector(predict(model, newdata = test_x)) #predict new y values
print(predicted_y)
mse <- mean((test_y - predicted_y) ^ 2) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
print(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- as.vector(test_data[[toString(as.list(svm_model$terms)[[2]])]])
predicted_y <- as.vector(predict(model, newdata = test_x)) #predict new y values
print(predicted_y)
mse <- mean((test_y - predicted_y) ^ 2) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
print(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- as.vector(test_data[[toString(as.list(svm_model$terms)[[2]])]])
predicted_y <- as.vector(predict(model, newdata = test_x)) #predict new y values
print(test_y)
mse <- mean((test_y - predicted_y) ^ 2) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
print(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
svm_fit <- function(kernel, equation, data){
svm_mod <- svm(equation, data = data, kernel = kernel)
return(svm_mod)
}
calc_mse <- function(model, test_data){
pred_columns <- attr(model$terms, "term.labels") #get list of data columns
test_x <- test_data[,pred_columns] #separate test x and y data
test_y <- as.vector(test_data[[toString(as.list(svm_model$terms)[[2]])]])
predicted_y <- as.vector(predict(model, newdata = test_x)) #predict new y values
mse <- mean((test_y - predicted_y) ^ 2) #calculate mse
return(mse)
}
svm_grid <- function(equation, data, test_data){
kernels <-  c("linear", "polynomial", "radial")
models <- lapply(kernels, svm_fit, equation = equation, data = data)
mse_list <- lapply(models, calc_mse, test_data = test_data)
min_index <- which.min(mse_list)
return(models[[min_index]])
}
grid_svm_model <- svm_grid(medv~., data = Boston[train,], test_data = Boston[-train, ])
calc_mse(grid_svm_model, Boston[-train,])
