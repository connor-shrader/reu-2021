beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
x <- matrix(rnorm(n * p), nrow = n, ncol = p, sd = sd)
}
else if (type == "symmetric") {
x <- data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = 0.9
))
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) -
(1:n - 1))
r <- corr^exponent
x <- data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = r
))
}
else if (type == "unstructured") {
x <- data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = corr
))
}
x <- cbind(1, x)
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 2, seed = 1, var = 1, type = "independent", error_var = 1, beta = NONE)
generate_data(n = 5, p = 2, seed = 1, var = 1, type = "independent", error_var = 1)
?rnorm_multi
generate_data <- function(n, p, seed, var = 1, type = "independent", rho = 0,
beta = NULL, error_var = 1) {
set.seed(seed)
# Generate coefficient values.
if (is.null(beta)) {
beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
r <- 0
}
else if (type == "symmetric") {
r <- corr
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) -
(1:n - 1))
r <- corr^exponent
}
else if (type == "unstructured") {
r <- corr
}
x <- cbind(1, data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = corr
)))
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 2, seed = 1, var = 1, type = "independent", error_var = 1)
generate_data <- function(n, p, seed, var = 1, type = "independent", corr = 0,
beta = NULL, error_var = 1) {
set.seed(seed)
# Generate coefficient values.
if (is.null(beta)) {
beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
r <- 0
}
else if (type == "symmetric") {
r <- corr
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) -
(1:n - 1))
r <- corr^exponent
}
else if (type == "unstructured") {
r <- corr
}
x <- cbind(1, data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = corr
)))
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 2, seed = 1, var = 1, type = "independent", error_var = 1)
?cbind
generate_data <- function(n, p, seed, var = 1, type = "independent", corr = 0,
beta = NULL, error_var = 1) {
set.seed(seed)
# Generate coefficient values.
if (is.null(beta)) {
beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
r <- 0
}
else if (type == "symmetric") {
r <- corr
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) -
(1:n - 1))
r <- corr^exponent
}
else if (type == "unstructured") {
r <- corr
}
x <- cbind(1, data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = corr
)))
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
y2 <- x %*% beta
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, y2, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", "y2", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 2, seed = 1, var = 1, type = "independent", error_var = 1)
generate_data(n = 5, p = 2, seed = 1, var = 1, type = "independent", error_var = 2)
generate_data(n = 5, p = 2, seed = 1, var = 1, type = "independent", error_var = 50)
generate_data(n = 5, p = 2, seed = 1, var = 1, type = "independent", error_var = 100)
generate_data(n = 5, p = 2, seed = 1, var = c(1, 50), type = "independent", error_var = 1)
generate_data(n = 5, p = 3, seed = 1, var = c(1, 50), type = "independent", error_var = 1)
generate_data(n = 5, p = 3, seed = 1, var = c(1, 50), beta = c(1, 1) type = "independent", error_var = 1)
generate_data(n = 5, p = 3, seed = 1, var = c(1, 50), beta = c(1, 1), type = "independent", error_var = 1)
generate_data(n = 5, p = 3, seed = 1, type = "independent", error_var = 1)
generate_data(n = 5, p = 2, seed = 1, type = "independent", error_var = 1)
generate_data(n = 5, p = 2, seed = 1, type = "independent", error_var = 1, type = "symmetric", corr = 0.9)
generate_data(n = 5, p = 2, seed = 1, error_var = 1, type = "symmetric", corr = 0.9)
generate_data(n = 5, p = 5, seed = 1, error_var = 1, type = "symmetric", corr = 0.9)
generate_data(n = 5, p = 5, seed = 1, error_var = 1, type = "autoregressive", corr = 0.9)
generate_data <- function(n, p, seed, var = 1, type = "independent", corr = 0,
beta = NULL, error_var = 1) {
set.seed(seed)
# Generate coefficient values.
if (is.null(beta)) {
beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
r <- 0
}
else if (type == "symmetric") {
r <- corr
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) -
(1:n - 1))
r <- corr^exponent
print(r)
}
else if (type == "unstructured") {
r <- corr
}
x <- cbind(1, data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = corr
)))
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
y2 <- x %*% beta
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, y2, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", "y2", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 5, seed = 1, error_var = 1, type = "autoregressive", corr = 0.9)
generate_data(n = 5, p = 5, seed = 1, error_var = 1, type = "autoregressive", corr = 0.8)
generate_data(n = 5, p = 10, seed = 1, error_var = 1, type = "autoregressive", corr = 0.8)
generate_data(n = 5, p = 10, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 1, 1, 1))
?multi_rnorm
?rnorm_multi
generate_data <- function(n, p, seed, var = 1, type = "independent", corr = 0,
beta = NULL, error_var = 1) {
set.seed(seed)
# Generate coefficient values.
if (is.null(beta)) {
beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
r <- 0
}
else if (type == "symmetric") {
r <- corr
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) -
(1:n - 1))
r <- corr^exponent
print(r)
}
else if (type == "unstructured") {
r <- corr
}
x <- cbind(1, data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = corr,
corr_mat = corr
)))
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
y2 <- x %*% beta
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, y2, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", "y2", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 10, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 1, 1, 1))
generate_data <- function(n, p, seed, var = 1, type = "independent", corr = 0,
beta = NULL, error_var = 1) {
set.seed(seed)
# Generate coefficient values.
if (is.null(beta)) {
beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
r <- 0
}
else if (type == "symmetric") {
r <- corr
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) -
(1:n - 1))
r <- corr^exponent
print(r)
}
else if (type == "unstructured") {
r <- corr
}
x <- cbind(1, data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = r,
)))
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
y2 <- x %*% beta
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, y2, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", "y2", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 10, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 1, 1, 1))
generate_data <- function(n, p, seed, var = 1, type = "independent", corr = 0,
beta = NULL, error_var = 1) {
set.seed(seed)
# Generate coefficient values.
if (is.null(beta)) {
beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
r <- 0
}
else if (type == "symmetric") {
r <- corr
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) - (1:n - 1))
r <- corr^exponent
print(r)
}
else if (type == "unstructured") {
r <- corr
}
print(r)
x <- cbind(1, data.matrix(rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = r,
)))
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 10, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 1, 1, 1))
generate_data(n = 5, p = 2, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 1, 1, 1))
generate_data(n = 5, p = 2, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.9, 0.9, 1))
generate_data(n = 5, p = 2, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.9, 0.1, 1))
generate_data <- function(n, p, seed, var = 1, type = "independent", corr = 0,
beta = NULL, error_var = 1) {
set.seed(seed)
# Generate coefficient values.
if (is.null(beta)) {
beta <- c(1, 2, -2, 0, 0, 0.5, 3)
}
print("T")
if (length(beta) < p + 1) {
zeroes <- rep(0, (p + 1) - length(beta))
beta <- c(beta, zeroes)
}
else if (length(beta) > p + 1) {
beta <- beta[1:(p + 1)]
}
sd <- rep(sqrt(var), length.out = p)
if (type == "independent") {
r <- 0
}
else if (type == "symmetric") {
r <- corr
}
else if (type == "autoregressive") {
# Source for this code:
# https://statisticaloddsandends.wordpress.com/2020/02/07/generating-correlation-matrix-for-ar1-model/
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) - (1:n - 1))
r <- corr^exponent
print(r)
}
else if (type == "unstructured") {
r <- corr
}
print(r)
x <- cbind(1, rnorm_multi(
n = n,
vars = p,
mu = 0,
sd = sd,
r = r,
as.matrix = TRUE
))
# Generate corresponding y values.
y <- x %*% beta + rnorm(n, sd = sqrt(error_var))
# Create return data frame. We removed the column of 1's that we used as
# an intercept for generating the data.
dat <- data.frame(cbind(y, x[, -1]))
# Set the column names to "y, x1, x2, ..., xp"
colnames(dat) <- c("y", paste("x", 1:p, sep=""))
return(dat)
}
generate_data(n = 5, p = 2, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.9, 0.1, 1))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.99, 0.99, 0.99, 1, 0, 0.99, 0, 1))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.99, 0.99, 0.99, 1, 0.1, 0.99, 0.1, 1))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.99, 0.99,
0.99, 1, 0.1,
0.99, 0.1, 1))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.9, 0.9,
0.9, 1, 0.1,
0.9, 0.1, 1))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.5, 0.5,
0.5, 1, 0.1,
0.5, 0.1, 1))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.5, 0.5,
0.5, 1, 0.1,
0.5, 0.1, 1), var = c(5, 5, 5))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "unstructured", corr = c(1, 0.5, 0.5,
0.5, 1, 0.1,
0.5, 0.1, 1))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "independent", corr = c(1, 0.5, 0.5,
0.5, 1, 0.1,
0.5, 0.1, 1))
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "independent", corr = 0.5)
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "independent", corr = 0.9)
generate_data(n = 5, p = 3, seed = 1, error_var = 1, type = "symmetric", corr = 0.9)
source("~/NSFREU/reu-2021/code/variable-selection/diagram.r", echo=TRUE)
source("~/NSFREU/reu-2021/code/variable-selection/penalty.r", echo=TRUE)
source("~/NSFREU/reu-2021/code/figures/lasso-scad-mcp-penalty.r", echo=TRUE)
source("~/NSFREU/reu-2021/code/figures/lasso-scad-mcp-penalty.r", echo=TRUE)
source("~/NSFREU/reu-2021/code/figures/lasso-scad-mcp-penalty.r", echo=TRUE)
