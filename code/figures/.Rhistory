{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model$str))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
model.coef <- lapply(models, function(model) model$coefficients)
?sapply
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, coefficients)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
models
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, coefficients)
View(a)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
View(a)
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) print(model$coefficients[str])))
}
a <- sapply(models, coefficients)
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) print(model$coefficients[str]))
}
a <- sapply(models, coefficients)
a
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
a
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
get.coef <- function(model)
{
print(model)
lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
af$coefficients["x1"]
af$coefficients["x2"]
af$coefficients["x3"]
get.coef <- function(model)
{
print(model)
sapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
get.coef <- function(model)
{
print(model)
lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
a
get.coef <- function(model)
{
print(model)
unlist(lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
a
get.coef <- function(model)
{
print(model)
unlist(lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
df <- data.frame(a)
View(df)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
df <- data.frame(a, row.names = row.names)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
df <- data.frame(a)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names, function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
df <- data.frame(a, row.names = row.names)
df
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names, function(str) model$coefficients[str]))
}
df <- data.frame(lapply(models, get.coef), row.names = row.names)
list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
list(af, bf, ab, bb, asf, bsf, asb, bsb)
data()
BOD
?BOD
ggplot(data = BOD)
library(ggplot)
library(tidyverse)
ggplot(data = BOD)
ggplot(data = BOD,)
ggplot(data = BOD,
mapping = aes(x = Time,))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand)) +
geom_point()
geom_point(size = 5)
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand)) +
geom_point(size = 5) +
geom_line(colour = "red")
ggplot(BOD, aes(Time, demand))+
geom_point(size = 3)+
geom_line(colour = "red")
models <- list(fm = fm, nm = nm, af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf,
asb = asb, bsb = bsb, scad = scad, mcp = mcp)
models <- list(fm)
models$fm
source('~/github/reu-2021/code/variable-selection/monte-carlo.r', echo=TRUE)
models <- list(fm)
models$fm
models[1]
models <- list(fm = fm)
models[1]
coef(fm)
coef(ab)
unlist(lapply(row.names, function(predictor) coef(ab)[predictor]))
View(df)
df[true] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
p <- 10
df[true] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
df["true"] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
# Sets all zero coefficients to NA (this makes it easier to read).
df[is.na(df)] <- 0
scad <- cv.ncvreg(X = ex.dat[, -1], y = ex.dat$y, penalty = "SCAD")
coef(scad)
?system.time
library(dplyr)
multi.merge <-function(model_list, col_names){ #takes input of list of lm models, and vector of column names
for (i in 1:length(model_list)){
model_list[[i]] <- data.frame(as.matrix(coef(model_list[[i]]))) #turns lm model class into dataframe of coefficients
model_list[[i]]$betas <- row.names(model_list[[i]]) #adds column of beta coefficient names
}
# ugly code to rearrange order of beta column and full model column
full_df <- model_list[[1]]
full_df <- full_df[-1]
full_df$fm <- model_list[[1]][[1]]
for (i in 2:length(model_list)){
full_df <- left_join(full_df, model_list[[i]], by = "betas") #joins code together by beta coefficient name
}
full_df[is.na(full_df)] <- 0
colnames(full_df) <- c("betas", col_names) #renames columns according to what was input to the function
return(full_df)
}
coefs_df <- multi.merge(list(fm, af, bf, ab, bb, asf, bsf, asb, bsb, mcp, scad, lasso, ridge, enet),
c("fm", "af", "bf", "ab", "bb", "asf", "bsf", "asb", "bsb", "mcp", "scad", "lasso", "ridge", "elastic_net"))
names(lasso)
coef(lasso)
coef(mcp)
coef(scad)
# perform-simulations.r
# Gabe Ackall, Connor Shrader
# This file contains run_simulations(), a function that we used to perform
# Monte Carlo simulations using the functions contained in metrics.r
# and simulation.r.
rm(list = ls())
# Used to set current working directory to the location of this file.
library(rstudioapi) # v0.13
setwd(dirname(getActiveDocumentContext()$path))
source("simulation.r")
source("metrics.r")
x <- readRDS("../../results/monte-carlo-transfer/sim_results_1000_2000_1_autoregressive_0.2.rds")
y <- readRDS("../../results/monte-carlo/sim_results_1000_2000_1_autoregressive_0.2.rds")
View(x)
View(y)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
View(parameters)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
res <- run_simulations(indices = 99, iterations = 1)
res <- run_simulations(indices = 63, iterations = 1)
res <- run_simulations(indices = 63, iterations = 1)
x <- readRDS("../../results/monte-carlo-test2/sim_results_1000_2000_1_autoregressive_0.2.rds")
View(x)
res <- run_simulations(indices = 62, iterations = 1)
res <- run_simulations(indices = 64, iterations = 1)
y <- readRDS("../../results/monte-carlo-test2/sim_results_50_10_3_autoregressive_0.2.rds")
View(y)
View(x)
source("simulation.r")
res <- run_simulations(indices = 64, iterations = 1)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
res <- run_simulations(indices = 64, iterations = 1)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
res <- run_simulations(indices = 64, iterations = 1)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
res <- run_simulations(indices = 64, iterations = 1)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
res <- run_simulations(indices = 64, iterations = 1)
x <- readRDS("../../results/monte-carlo-test2/sim_results_50_10_3_autoregressive_0.2.rds")
View(x)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
res <- run_simulations(indices = 64, iterations = 1)
View(res)
x <- readRDS("../../results/monte-carlo-test2/sim_results_50_10_3_autoregressive_0.2.rds")
View(x)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
x <- readRDS("../../results/monte-carlo-test2/sim_results_50_10_3_autoregressive_0.2.rds")
res <- run_simulations(indices = 64, iterations = 1)
set.seed(1)
generate_data(n = 20, p = 5, type = "independent")
generate_data(n = 20, p = 5, type = "autoregressive", corr = 0.2)
generate_data(n = 20, p = 5, type = "autoregressive", corr = 0.2, st_dev = 3)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
set.seed(1)
generate_data(n = 20, p = 5, type = "autoregressive", corr = 0.2, st_dev = 3)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
set.seed(1)
generate_data(n = 20, p = 5, type = "autoregressive", corr = 0.2, st_dev = 3)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
set.seed(1)
generate_data(n = 20, p = 5, type = "autoregressive", corr = 0.2, st_dev = 3)
set.seed(1)
generate_data(n = 20, p = 5, type = "independent", corr = 0.2, st_dev = 3)
set.seed(1)
generate_data(n = 20, p = 5, type = "blockwise", corr = 0.2, st_dev = 3)
set.seed(1)
generate_data(n = 20, p = 8, type = "blockwise", corr = 0.2, st_dev = 3, block_size = 4)
set.seed(1)
rnorm_multi(n = 2, vars = 2, sd = 1, r = 0, as.matrix = TRUE)
set.seed(1)
rnorm_multi(n = 2, vars = 2, sd = 1, r = 0, as.matrix = TRUE)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/simulation.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
run_simulations(indices = 1:270, iterations = 100)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
run_simulations(indices = 1:270, iterations = 100)
run_simulations(indices = 6:270, iterations = 100)
run_simulations(indices = c(5, 59), iterations = 100)
source('~/github/reu-2021/code/monte-carlo/perform-simulations.r', echo=TRUE)
run_simulations(indices = c(5, 59), iterations = 100)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
x <- readRDS("../../results/monte-carlo/sim_results_50_2000_1_independent_0.rds")
View(x)
x <- readRDS("../../results/monte-carlo/sim_results_200_100_1_independent_0.rds")
View(x)
View(x)
x <- readRDS("../../results/monte-carlo/sim_results_50_2000_1_independent_0.rds")
View(x)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
x <- rnorm_multi(n = 1000, vars = 2000)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/repair-files.r', echo=TRUE)
warnings()
stopCluster(cl)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(aggregate_results)
View(all_results)
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(aggregate_results)
View(all_results)
?saveRDS
saveRDS(all_results, file = "../../results/monte-carlo/all_results.rds")
saveRDS(aggregate_results, file = "../../results/monte-carlo/aggregate_results.rds")
source('~/github/reu-2021/code/monte-carlo/aggregate-results.r', echo=TRUE)
View(aggregate_results)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
plot_metric(aggregate_results, "test_mse", facet = "st_dev", p = 10, type = "independent", n = 50) + reu_border
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
plot_metric(aggregate_results, "test_mse", facet = "type", p = 10, st_dev = 1, n = 50)
plot_metric(aggregate_results, "test_mse", facet = "type", p = 10, st_dev = 1, n = 50, p = 10)
plot_metric(aggregate_results, "test_mse", facet = "type", p = 10, st_dev = 1, n = 50, corr = 0.2)
plot_metric(aggregate_results, "test_mse", facet = "corr", p = 10, st_dev = 1, n = 50, type = "symmetric")
plot_metric(aggregate_results, "test_mse", facet = "corr", p = 10, st_dev = 1, n = 50, type = "autoregressive")
View(aggregate_results)
plot_metric(aggregate_results, "tp", facet = "corr", p = 10, st_dev = 1, n = 50, type = "autoregressive")
plot_metric(aggregate_results, "fp", facet = "corr", p = 10, st_dev = 1, n = 50, type = "autoregressive")
plot_metric(aggregate_results, "fp", facet = "corr", p = 100, st_dev = 1, n = 1000, type = "autoregressive")
?sample
?seq
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
x
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
dat <- data.frame(x = x, y = y)
View(dat)
model <- lm(y ~ x, data = dat)
View(model)
coef(model)
plot(model)
plot(model)
a <- coef(model)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point()
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1])
coefs <- coef(model)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1])
?geom_segment
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = x))
dat$yhat <- coefs[1] + coefs[2] * dat$x
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat))
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat)) +
reu_blank
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat)) +
reu_border
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat)) +
reu_blank
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat)) +
reu +
theme(
panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()
)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat)) +
reu +
theme(
panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.text = element_blank(),
#axis.ticks = element_blank(),
axis.title = element_blank()
)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat)) +
reu +
theme(
panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.text = element_blank(),
axis.ticks = element_blank(),
#axis.title = element_blank()
)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat)) +
reu +
theme(
panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
#axis.text = element_blank(),
#axis.ticks = element_blank(),
#axis.title = element_blank()
)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat)) +
reu_border
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat), color = "blue") +
reu_border
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat), color = "green") +
reu_border
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_point() +
geom_abline(slope = coefs[2], intercept = coefs[1]) +
geom_segment(aes(x = x, y = y, xend = x, yend = yhat), color = "red") +
reu_border
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
source('~/github/reu-2021/code/figures/ols-figure.r', echo=TRUE)
