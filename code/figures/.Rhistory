citation("stats")
citation("MASS")
citation("glmnet")
print(citation("glmnet", bibtex = TRUE))
citation("gcdnet")
citation("ncvreg")
citation("xgboost")
citation("ranger")
citation("randomForest")
citation("e1071")
citation("MASS"
)
source('~/github/reu-2021/code/figures/svm-figure.r', echo=TRUE)
sv_plot
sv_plot <- ggplot(data = dat, mapping = aes(x = x, y = y, color = class)) +
geom_function(fun = function(x) 4/3 * x + 1/3, xlim = c(0, 23/16), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1, xlim = c(3/4, 2), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1/3, xlim = c(1/4, 59/32), color = "black", size = 2) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point(mapping = aes(x = x, y = y, fill = class), size = 3) +
scale_color_manual(values = c("transparent", "#000000")) +
annotate(
"text",
label = "x",
x = 1,
y = -0.1,
size = 6
) +
annotate(
"text",
label = "y",
x = -0.1,
y = 1,
size = 6,
angle = 90
) +
reu_blank +
theme(
legend.position = "none"
)
sv_plot
sv_plot <- ggplot(data = dat, mapping = aes(x = x, y = y, color = class)) +
geom_function(fun = function(x) 4/3 * x + 1/3, xlim = c(0, 23/16), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1, xlim = c(3/4, 2), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1/3, xlim = c(1/4, 59/32), color = "black", size = 2) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point(mapping = aes(x = x, y = y, fill = class), size = 3) +
#scale_color_manual(values = c("transparent", "#000000")) +
annotate(
"text",
label = "x",
x = 1,
y = -0.1,
size = 6
) +
annotate(
"text",
label = "y",
x = -0.1,
y = 1,
size = 6,
angle = 90
) +
reu_blank +
theme(
legend.position = "none"
)
sv_plot
sv_plot <- ggplot(data = dat, mapping = aes(x = x, y = y, color = class)) +
geom_function(fun = function(x) 4/3 * x + 1/3, xlim = c(0, 23/16), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1, xlim = c(3/4, 2), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1/3, xlim = c(1/4, 59/32), color = "black", size = 2) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point(mapping = aes(x = x, y = y, fill = class, color = support, stroke = stroke), shape = 21, size = 3) +
scale_color_manual(values = c("transparent", "#000000")) +
annotate(
"text",
label = "x",
x = 1,
y = -0.1,
size = 6
) +
annotate(
"text",
label = "y",
x = -0.1,
y = 1,
size = 6,
angle = 90
) +
reu_blank +
theme(
legend.position = "none"
)
sv_plot
sv_plot <- ggplot(data = dat, mapping = aes(x = x, y = y, color = class)) +
geom_function(fun = function(x) 4/3 * x + 1/3, xlim = c(0, 23/16), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1, xlim = c(3/4, 2), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1/3, xlim = c(1/4, 59/32), color = "black") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point(mapping = aes(x = x, y = y, color = class), size = 3) +
annotate(
"text",
label = "x",
x = 1,
y = -0.1,
size = 6
) +
annotate(
"text",
label = "y",
x = -0.1,
y = 1,
size = 6,
angle = 90
) +
reu_blank +
theme(
legend.position = "none"
)
sv_plot
sv_plot <- ggplot(data = dat, mapping = aes(x = x, y = y, color = class)) +
geom_function(fun = function(x) 4/3 * x + 1/3, xlim = c(0, 23/16), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1, xlim = c(3/4, 2), linetype = "dashed", color = "black") +
geom_function(fun = function(x) 4/3 * x - 1/3, xlim = c(1/4, 59/32), color = "black") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point(mapping = aes(x = x, y = y, fill = class, color = support, stroke = stroke), shape = 21, size = 3) +
scale_color_manual(values = c("transparent", "#000000")) +
annotate(
"text",
label = "x",
x = 1,
y = -0.1,
size = 6
) +
annotate(
"text",
label = "y",
x = -0.1,
y = 1,
size = 6,
angle = 90
) +
reu_blank +
theme(
legend.position = "none"
)
sv_plot
source('~/github/reu-2021/code/figures/svm-figure.r', echo=TRUE)
source('~/github/reu-2021/code/figures/random-forest.r', echo=TRUE)
plot(fit)
fit <- randomForest(Species ~ ., data = iris, ntree = 3)
plot(fit)
getTree(fit, 1, labelVar = TRUE)
plot(getTree(fit, 1, labelVar = TRUE))
t <- getTree(fit, 1, labelVar = TRUE)
class(t)
to.dendrogram <- function(dfrep,rownum=1,height.increment=0.1){
if(dfrep[rownum,'status'] == -1){
rval <- list()
attr(rval,"members") <- 1
attr(rval,"height") <- 0.0
attr(rval,"label") <- dfrep[rownum,'prediction']
attr(rval,"leaf") <- TRUE
}else{##note the change "to.dendrogram" and not "to.dendogram"
left <- to.dendrogram(dfrep,dfrep[rownum,'left daughter'],height.increment)
right <- to.dendrogram(dfrep,dfrep[rownum,'right daughter'],height.increment)
rval <- list(left,right)
attr(rval,"members") <- attr(left,"members") + attr(right,"members")
attr(rval,"height") <- max(attr(left,"height"),attr(right,"height")) + height.increment
attr(rval,"leaf") <- FALSE
attr(rval,"edgetext") <- dfrep[rownum,'split var']
#To add Split Point in Dendrogram
#attr(rval,"edgetext") <- paste(dfrep[rownum,'split var'],"\n<",round(dfrep[rownum,'split point'], digits = 2),"=>", sep = " ")
}
class(rval) <- "dendrogram"
return(rval)
}
tree <- getTree(fit,1,labelVar=TRUE)
d <- to.dendrogram(tree)
d
plot(d)
library(biglasso)
install.packages("biglasso")
citation("biglasso")
source('~/github/reu-2021/code/figures/empirical-performance.r', echo=TRUE)
save_plot(plot = mse_plot,
filename = "empirical_mse",
path = "./images")
save_plot(plot = mse_plot,
filename = "empirical_mse",
path = "./images")
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
