source('~/github/reu-2021/code/figures/empirical-lasso.r', echo=TRUE)
View(adap_ridge)
adap_ridge$nzero
adap_ridge$lambda
View(adap_ridge)
plot(adap_ridge)
library(glmnet)
plot(adap_ridge)
View(mse_df)
View(adap_enet)
set.seed(1)
set.seed(1)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
test_fig <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"), color = "corr", p = 100, n = 200)
View(test_fig)
test_fig
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
args <- list(...)
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
data <- subset_data(data, ...)
plt <- ggplot(data = data) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
return(plt)
}
test_fig <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"), color = "corr", p = 100, n = 200)
plt <- ggplot(data = data) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
args <- list(...)
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
data <- subset_data(data, ...)
plt <- ggplot(data = data) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
test_fig <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"), color = "corr", p = 100, n = 200)
test_fig
generate_table <- function(data, ...) {
data <- subset_data(data, ...)
# table_results contains the data used to generate a LaTeX summary table.
# I defined this as a new variable so that aggregate_results is not overridden.
table_results <- data[c("st_dev", "type", "corr", "model_name", "test_mse")]
names(table_results) <- c("st.dev", "type", "corr", "model.name", "test.mse")
# Create a tabular object from the tables library. The rows are layered by the
# standard deviation and model name; the columns are layered by the type
# of correlation and strength of correlation. The means and standard deviations
# of the test MSE are shown.
tab <- tabular((st.dev * model.name) ~ (type * corr * test.mse) * (Mean + SD), data = table_results)
# The following two lines remove rows and columns that have a 0 as the first entry.
# This removes unncessary rows and columns that aren't used for our plot/table.
tab <- tab[tab[, 1] > 0, ]
tab <- tab[, tab[1, ] > 0]
# Call the following line to print out the LaTeX table. I could not get it to
# save correctly to a file, so the output must be copy/pasted.
code <- toLatex(tab, options = list(justification = "l"))
return(code)
}
table_for_n200_p100 <- generate_table(all_results, n = 200, p = 100)
View(table_for_n200_p100)
View(table_for_n200_p100)
generate_table <- function(data, ...) {
data <- subset_data(data, ...)
# table_results contains the data used to generate a LaTeX summary table.
# I defined this as a new variable so that aggregate_results is not overridden.
table_results <- data[c("st_dev", "type", "corr", "model_name", "test_mse")]
names(table_results) <- c("st.dev", "type", "corr", "model.name", "test.mse")
# Create a tabular object from the tables library. The rows are layered by the
# standard deviation and model name; the columns are layered by the type
# of correlation and strength of correlation. The means and standard deviations
# of the test MSE are shown.
tab <- tabular((st.dev * model.name) ~ (type * corr * test.mse) * (Mean + SD), data = table_results)
# The following two lines remove rows and columns that have a 0 as the first entry.
# This removes unncessary rows and columns that aren't used for our plot/table.
tab <- tab[tab[, 1] > 0, ]
tab <- tab[, tab[1, ] > 0]
# Call the following line to print out the LaTeX table. I could not get it to
# save correctly to a file, so the output must be copy/pasted.
code <- toLatex(tab, options = list(justification = "l"))
return(code$text)
}
table_for_n200_p100 <- generate_table(all_results, n = 200, p = 100)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
fig_for_n1000_p10
rlang::last_error()
fig_for_n1000_p10
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
args <- list(...)
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
data <- subset_data(data, ...)
View(data)
plt <- ggplot(data = data) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n1000_p10
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
args <- list(...)
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
data <- subset_data(data, ...)
print("E")
View(data)
plt <- ggplot(data = data) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n1000_p10
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"), color = "corr", n = 1000, p = 10)
fig_for_n200_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"), color = "corr", n = 200, p = 10)
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"), color = "corr", n = 1000, p = 10)
fig_for_n1000_p10
ggsave(
filename = "facet_1000_10.png",
path = "./images",
plot = fig_for_n1000_p10,
type = "cairo-png",
width = 10,
height = 6,
unit = "in"
)
ggsave(
filename = "facet_1000_10.eps",
path = "./images",
plot = fig_for_n1000_p10,
width = 10,
height = 6,
unit = "in"
)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
ggsave(
filename = "facet_1000_10.png",
path = "./images",
plot = fig_for_n1000_p10,
type = "cairo-png",
width = 10,
height = 6,
unit = "in"
)
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
args <- list(...)
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
data <- subset_data(data, ...)
View(data)
plt <- ggplot(data = data) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 1000, p = 10)
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 1000, p = 10)
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
View(data)
data <- subset_data(data, ...)
View(data)
plt <- ggplot(data = data) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 1000, p = 10)
fig_for_n1000_p10
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 200, p = 10)
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
data <<- subset_data(data, ...)
View(data)
plt <- ggplot(data = data) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 200, p = 10)
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
dat <<- subset_data(data, ...)
View(dat)
plt <- ggplot(data = dat) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 200, p = 10)
fig_for_n1000_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 200, p = 100)
View(subset_data(plot_results, n = 50, p = 10))
View(subset_data(plot_results, n = 1000, p = 10))
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
nrow(subset_data(plot_results, n = 50, p = 10))
View(subset_data(plot_results, n = 50, p = 10))
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
dat <- subset_data(data, ...)
print(nrow(dat))
return(dat)
plt <- ggplot(data = dat) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n50_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 50, p = 10)
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
View(data)
dat <- subset_data(data, ...)
print(nrow(dat))
return(dat)
plt <- ggplot(data = dat) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n50_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 50, p = 10)
# This function is a more complete version of plot_metric.
plot_metric <- function(data, metric, facet, color, ...) {
mean_metric <- paste("mean_", metric, sep = "")
sd_metric <- paste("sd_", metric, sep = "")
print(list(...))
View(data)
dat <- subset_data(data, ...)
print(nrow(dat))
return(dat)
plt <- ggplot(data = dat) +
geom_point(mapping = aes_string(x = "model_name", y = mean_metric, color = color, shape = color, fill = color), size = 2, alpha = 0.5) +
# geom_errorbar(mapping = aes_string(x = "model_name", y = mean_metric, ymin = paste(mean_metric, "-", sd_metric), ymax = paste(mean_metric, "+", sd_metric))) +
facet_grid(reformulate(facet[1], facet[2]), scales = "free_y", label = "label_parsed") +
scale_shape_manual(values = 21:24, name = "Correlation") +
scale_color_manual(values = hue_pal()(4), name = "Correlation") +
scale_fill_manual(values = hue_pal()(4), name = "Correlation") +
labs(x = "Model name", y = "Mean test MSE", color = "Correlation", shape = "Correlation") +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, size = 0.2),
panel.grid = element_line(color = "gray90"),
strip.background = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
)
return(plt)
}
fig_for_n50_p10 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", p = 50, p = 10)
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
fig_for_n50_p10
source('~/github/reu-2021/code/figures/test-plots.r', echo=TRUE)
fig_for_n1000_p2000 <- plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", n = 1000, p = 2000)
ggsave(
filename = "facet_1000_2000.png",
path = "./images",
plot = fig_for_n1000_p2000,
type = "cairo-png",
width = 10,
height = 6,
unit = "in"
)
ggsave(
filename = "facet_1000_2000.eps",
path = "./images",
plot = fig_for_n1000_p2000,
width = 10,
height = 6,
unit = "in"
)
table_for_n50_p10
plot_metric(plot_results, "test_mse", facet = c("type", "st_dev"),
color = "corr", n = 50, p = 10)
generate_table(all_results, n = 50, p = 10)
generate_table <- function(data, ...) {
data <- subset_data(data, ...)
# table_results contains the data used to generate a LaTeX summary table.
# I defined this as a new variable so that aggregate_results is not overridden.
table_results <- data[c("st_dev", "type", "corr", "model_name", "test_mse")]
names(table_results) <- c("st.dev", "type", "corr", "model.name", "test.mse")
# Create a tabular object from the tables library. The rows are layered by the
# standard deviation and model name; the columns are layered by the type
# of correlation and strength of correlation. The means and standard deviations
# of the test MSE are shown.
tab <- tabular((st.dev * model.name) ~ (type * corr * test.mse) * (Mean + SD), data = table_results)
# The following two lines remove rows and columns that have a 0 as the first entry.
# This removes unncessary rows and columns that aren't used for our plot/table.
tab <- tab[tab[, 1] > 0, ]
tab <- tab[, tab[1, ] > 0]
# Call the following line to print out the LaTeX table. I could not get it to
# save correctly to a file, so the output must be copy/pasted.
print(toLatex(tab, options = list(justification = "l")))
}
generate_table(all_results, n = 50, p = 10)
