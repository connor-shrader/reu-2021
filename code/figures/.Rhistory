View(test_dat)
?scale
>>>>>>> 61a7380aea0c247584c4f6088ec7fb9e308e6828
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
cancer <- readRDS("bcTCGA.rds")
cancer[["X"]] <- scale(cancer[["X"]], center = TRUE, scale = TRUE)
cancer_df <- as.data.frame(cbind(cancer[["y"]], cancer[["X"]])) #turn matrix into dataframe
<<<<<<< HEAD
colnames(cancer_df)[1] <- "y" #rename y column to "y"
set.seed(1)
lasso <- cv.glmnet(x = as.matrix(train_dat[, -1]), y = as.matrix(train_dat[, 1]), alpha = 1)
set.seed(1)
adap_lasso <- cv.gcdnet(x = as.matrix(train_dat[, -1]), y = train_dat[, 1], method = "ls", lambda2 = 0)
View(lasso)
View(adap_lasso)
View(lasso)
=======
View(cancer_df)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
options(expressions = 5e5)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
hist(cancer[["y"]])
?options
rstudio.exe --max-ppsize=5000000
# Random Forest Grid Search
rf_time <- system.time({
p <- length(train_dat)
rf_hyper_grid <- expand.grid(
mtry       = c(floor(sqrt(p)), floor(p / 3)),  # Predictors per tree
n.trees    = c(300, 500),
OOB_RMSE   = 0
)
# lapply(1:nrow(rf_hyper_grid), function(i) {
#   # train model
#   rf_model <- ranger(
#     formula         = y ~ .,
#     data            = dat,
#     num.trees       = rf_hyper_grid$n.trees[i],
#     mtry            = rf_hyper_grid$mtry[i],
#     min.node.size   = rf_hyper_grid$node_size[i],
#     sample.fraction = rf_hyper_grid$sampe_size[i],
#     seed            = 123
#   )
#
#   # add OOB error to grid
#   rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
# })
for(i in 1:nrow(rf_hyper_grid)) {
# train model
rf_model <- ranger(
formula         = y ~ .,
data            = train_dat,
num.trees       = rf_hyper_grid$n.trees[i],
mtry            = rf_hyper_grid$mtry[i],
min.node.size   = 5,
seed            = 123
)
# add OOB error to grid
rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
}
rf_best_grid <- rf_hyper_grid %>%
dplyr::arrange(OOB_RMSE)
# train best model
best_rf_model <- ranger(
formula         = y ~ .,
data            = train_dat,
num.trees       = rf_best_grid$n.trees[1],
mtry            = rf_best_grid$mtry[1],
min.node.size   = 5,
seed            = 123
)
})
models[[fold]][["rf"]] <- best_rf_model
runtimes[[fold]][["rf"]] <- rf_time
cv.mse[[fold]][["rf"]] <- calc_mse(best_rf_model, test_dat)
library(randomForest)
?randomForest
test_rf <- randomForest(data = train_dat, formula = y ~ .)
test_rf <- randomForest(x = train_dat[,-1], y = train_dat[,1])
View(test_rf)
?ranger
View(cv.mse)
?randomForest
# Random Forest Grid Search
rf_time <- system.time({
p <- length(train_dat)
rf_hyper_grid <- expand.grid(
mtry       = c(floor(sqrt(p)), floor(p / 3)),  # Predictors per tree
n.trees    = c(300, 500),
OOB_RMSE   = 0
)
# lapply(1:nrow(rf_hyper_grid), function(i) {
#   # train model
#   rf_model <- ranger(
#     formula         = y ~ .,
#     data            = dat,
#     num.trees       = rf_hyper_grid$n.trees[i],
#     mtry            = rf_hyper_grid$mtry[i],
#     min.node.size   = rf_hyper_grid$node_size[i],
#     sample.fraction = rf_hyper_grid$sampe_size[i],
#     seed            = 123
#   )
#
#   # add OOB error to grid
#   rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
# })
for(i in 1:nrow(rf_hyper_grid)) {
# train model
rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_hyper_grid$n.trees[i],
mtry            = rf_hyper_grid$mtry[i],
nodesize        = 5
)
# add OOB error to grid
rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
}
rf_best_grid <- rf_hyper_grid %>%
dplyr::arrange(OOB_RMSE)
# train best model
best_rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_best_grid$n.trees[1],
mtry            = rf_best_grid$mtry[1],
nodesize        = 5
)
})
models[[fold]][["rf"]] <- best_rf_model
runtimes[[fold]][["rf"]] <- rf_time
cv.mse[[fold]][["rf"]] <- calc_mse(best_rf_model, test_dat)
# Random Forest Grid Search
rf_time <- system.time({
p <- length(train_dat)
rf_hyper_grid <- expand.grid(
mtry       = c(floor(sqrt(p)), floor(p / 3)),  # Predictors per tree
n.trees    = c(300, 500),
OOB_RMSE   = 0
)
# lapply(1:nrow(rf_hyper_grid), function(i) {
#   # train model
#   rf_model <- ranger(
#     formula         = y ~ .,
#     data            = dat,
#     num.trees       = rf_hyper_grid$n.trees[i],
#     mtry            = rf_hyper_grid$mtry[i],
#     min.node.size   = rf_hyper_grid$node_size[i],
#     sample.fraction = rf_hyper_grid$sampe_size[i],
#     seed            = 123
#   )
#
#   # add OOB error to grid
#   rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
# })
for(i in 1:nrow(rf_hyper_grid)) {
# train model
rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_hyper_grid$n.trees[i],
mtry            = rf_hyper_grid$mtry[i],
nodesize        = 5
)
# add OOB error to grid
rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$mse)
}
rf_best_grid <- rf_hyper_grid %>%
dplyr::arrange(OOB_RMSE)
# train best model
best_rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_best_grid$n.trees[1],
mtry            = rf_best_grid$mtry[1],
nodesize        = 5
)
})
models[[fold]][["rf"]] <- best_rf_model
runtimes[[fold]][["rf"]] <- rf_time
cv.mse[[fold]][["rf"]] <- calc_mse(best_rf_model, test_dat)
rf_model$mse
mean(rf_model$mse)
# Random Forest Grid Search
rf_time <- system.time({
p <- length(train_dat)
rf_hyper_grid <- expand.grid(
mtry       = c(floor(sqrt(p)), floor(p / 3)),  # Predictors per tree
n.trees    = c(300, 500),
OOB_RMSE   = 0
)
# lapply(1:nrow(rf_hyper_grid), function(i) {
#   # train model
#   rf_model <- ranger(
#     formula         = y ~ .,
#     data            = dat,
#     num.trees       = rf_hyper_grid$n.trees[i],
#     mtry            = rf_hyper_grid$mtry[i],
#     min.node.size   = rf_hyper_grid$node_size[i],
#     sample.fraction = rf_hyper_grid$sampe_size[i],
#     seed            = 123
#   )
#
#   # add OOB error to grid
#   rf_hyper_grid$OOB_RMSE[i] <- sqrt(rf_model$prediction.error)
# })
for(i in 1:nrow(rf_hyper_grid)) {
# train model
rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_hyper_grid$n.trees[i],
mtry            = rf_hyper_grid$mtry[i],
nodesize        = 5
)
# add OOB error to grid
rf_hyper_grid$OOB_RMSE[i] <- sqrt(mean(rf_model$mse))
}
rf_best_grid <- rf_hyper_grid %>%
dplyr::arrange(OOB_RMSE)
# train best model
best_rf_model <- randomForest(
x               = train_dat[,-1],
y               = train_dat[,1],
ntree           = rf_best_grid$n.trees[1],
mtry            = rf_best_grid$mtry[1],
nodesize        = 5
)
})
models[[fold]][["rf"]] <- best_rf_model
runtimes[[fold]][["rf"]] <- rf_time
cv.mse[[fold]][["rf"]] <- calc_mse(best_rf_model, test_dat)
View(cv.mse)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
memory.limit(size=8000000)
source("~/NSFREU/reu-2021/code/empirical-data/models.R", echo=TRUE)
# Support Vector Machine
svm_time <- system.time({
svm_tune <- tune.svm(y ~ ., data = train_dat,
epsilon = seq(0.1, 0.5, 0.2),
cost = c(0.5, 1, 2)
)
svm_model <- svm_tune$best.model
})
models[[fold]][["svm"]] <- svm_model
runtimes[[fold]][["svm"]] <- svm_time
cv.mse[[fold]][["svm"]] <- calc_mse(svm_model, test_dat)
?svm
svm(y ~ ., data = train_dat,
epsilon = 0.5,
cost = 1
)
source("~/NSFREU/reu-2021/code/empirical-data/figures.R", echo=TRUE)
source("~/NSFREU/reu-2021/code/empirical-data/figures.R", echo=TRUE)
View(cancer_df)
load("C:/Users/PC/Downloads/simulation-environment.RData")
View(mse_df)
?rownames
rownames(mse_df)
cv_plot_df <- mse_df
cv_plot_df$names <- rownames(mse_df)
View(cv_plot_df)
library(caret) #for cross validation data splitting
library(tidyverse) #data cleaning
library(ggplot2)
# Create bar plot of empirical data results
# Basic barplot
cv_plot_df <- mse_df
cv_plot_df$names <- rownames(mse_df)
cv_res<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity")
cv_res
cv_plot_df <- mse_df
cv_plot_df$names <- rownames(mse_df)
cv_res<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity")
cv_res + + coord_cartesian(ylim=c(0.2,0.4))
cv_res + coord_cartesian(ylim=c(0.2,0.4))
(ylim=c(0.2,0.35))
cv_res + coord_cartesian(ylim=c(0.2,0.35))
cv_res + coord_cartesian(ylim=c(0.2,0.32))
cv_res + coord_cartesian(ylim=c(0.2,0.31))
cv_res<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity") + coord_cartesian(ylim=c(0.2,0.31))
cv_res
cv_plot_df <- mse_df
cv_plot_df$names <- rownames(mse_df)
cv_figs<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse))
cv_fig
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse))
cv_fig
?round
cv_plot_df <- mse_df
cv_plot_df$names <- rownames(mse_df)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse))
cv_fig
cv_plot_df <- mse_df
cv_plot_df$names <- rownames(mse_df)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse), vjust=-0.25)
cv_fig
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = sample) + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse), vjust=-0.25)
cv_fig
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse), vjust=-0.25)
cv_fig
View(models)
?glmnet
library(glmnet)
?cv.glmnet
# Basic barplot
cv_plot_df <- mse_df
cv_plot_df$Models <- rownames(mse_df)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(y="Average Mean Squared Error")
cv_fig
# Create bar plot of empirical data results
# Basic barplot
cv_plot_df <- mse_df
cv_plot_df$Models <- rownames(mse_df)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(y="Average Mean Squared Error")
cv_fig
cv_plot_df <- mse_df
cv_plot_df$Models <- rownames(mse_df)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25)
cv_fig
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse), vjust=-0.25)
cv_fig
# Create bar plot of empirical data results
# Basic barplot
cv_plot_df <- mse_df
cv_plot_df$Models <- rownames(mse_df)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse), vjust=-0.25)
cv_fig
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato")
cv_fig
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31))
cv_fig
cv_plot_df <- mse_df
cv_plot_df$names <- rownames(mse_df)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") + coord_cartesian(ylim=c(0.2,0.31)) + geom_text(aes(label=avg_mse), vjust=-0.25)
cv_fig
cv_plot_df <- mse_df
cv_plot_df$names <- rownames(mse_df)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(x = "Models", y = "Average Mean Square Error")
cv_fig
cv_plot_df <- mse_df
cv_plot_df$names <- c("Lasso", "Ridge", "Elastic Net", "Adap. Lasso", "Adap. Ridge", "Adap. Elastic Net", "SCAD", "MCP", "Random Forest", "XGBoost")
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(x = "Models", y = "Average Mean Square Error")
cv_fig
# Basic barplot
cv_plot_df <- mse_df
cv_plot_df$names <- c("Lasso", "Ridge", "Elas. Net", "Adap. Lasso", "Adap. Ridge", "Adap. Elas. Net", "SCAD", "MCP", "Random Forest", "XGBoost")
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(x = "Models", y = "Average Mean Square Error")
cv_fig
?factor
# Create bar plot of empirical data results
# Basic barplot
cv_plot_df <- mse_df
model_names <- c("Lasso", "Ridge", "Elas. Net", "Adap. Lasso", "Adap. Ridge", "Adap. Elas. Net", "SCAD", "MCP", "Random Forest", "XGBoost")
cv_plot_df$names <- as.factor(model_names, levels = model_names, labels = model_names)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(x = "Models", y = "Average Mean Square Error")
cv_fig
cv_plot_df <- mse_df
model_names <- c("Lasso", "Ridge", "Elas. Net", "Adap. Lasso", "Adap. Ridge", "Adap. Elas. Net", "SCAD", "MCP", "Random Forest", "XGBoost")
cv_plot_df$names <- as.factor(model_names)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(x = "Models", y = "Average Mean Square Error")
cv_fig
as.factor(model_names)
as.factor(model_names, labels = model_names)
?factor''
?factor
as.factor(model_names, ordered = TRUE)
as.factor(model_names, levels = model_names, ordered = TRUE)
factor(model_names)
factor(model_names)$levels
factor(model_names)[["Levels"]]
factor(model_names)["Levels"]
factor(model_names)["Levels"] = model_names
ordered(model_names)
factor(model_names, levels = c("Lasso", "Ridge", "Elas. Net", "Adap. Lasso", "Adap. Ridge", "Adap. Elas. Net", "SCAD", "MCP", "Random Forest", "XGBoost"))
factor(model_names, levels = model_names)
cv_plot_df <- mse_df
model_names <- c("Lasso", "Ridge", "Elas. Net", "Adap. Lasso", "Adap. Ridge", "Adap. Elas. Net", "SCAD", "MCP", "Random Forest", "XGBoost")
cv_plot_df$names <- factor(model_names, levels = model_names)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(x = "Models", y = "Average Mean Square Error")
cv_fig
>>>>>>> 61a7380aea0c247584c4f6088ec7fb9e308e6828
load("C:/Users/PC/Downloads/simulation-environment.RData")
View(models)
View(cv_folds)
load("C:/Users/PC/Downloads/simulation-environment.RData")
View(cv.mse)
View(mse_df)
cv_plot_df <- mse_df
model_names <- c("Lasso", "Ridge", "Elas. Net", "Adap. Lasso", "Adap. Ridge", "Adap. Elas. Net", "SCAD", "MCP", "XGBoost", "Random Forest")
cv_plot_df$names <- factor(model_names, levels = model_names)
cv_plot_df$avg_mse <- round(cv_plot_df$avg_mse, 4)
View(cv_plot_df)
View(cv.mse)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(x = "Models", y = "Average Mean Square Error")
cv_fig
library(ggplot2)
cv_fig<-ggplot(data=cv_plot_df, aes(x=names, y=avg_mse)) +
geom_bar(stat="identity", fill = "tomato") +
coord_cartesian(ylim=c(0.2,0.31)) +
geom_text(aes(label=avg_mse), vjust=-0.25) +
labs(x = "Models", y = "Average Mean Square Error")
cv_fig
load("C:/Users/PC/Downloads/simulation-environment.RData")
View(cv_folds)
View(models)
View(runtimes)
source("~/GitHub/reu-2021/code/empirical-data/figures.R", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/bias-variance.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/decision-tree.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/decision-tree.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/bias-variance.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/empirical-performance.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/facet-plots.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/histogram.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/lasso-ridge.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/lasso-scad-mcp-penalty.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/ols-figure.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/random-forest.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/svm-figure.r", echo=TRUE)
source("~/GitHub/reu-2021/code/figures/venn-diagram.r", echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
View(plot_results)
View(plot_results)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
source('~/github/reu-2021/code/figures/facet-plots.r', echo=TRUE)
