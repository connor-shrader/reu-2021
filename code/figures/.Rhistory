scale_y_continuous(breaks = seq(0, 6, by = 1), limits = c(0, 6)) +
reu_border +
theme(legend.title = element_blank())
penalty
library(ggplot2)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("themes.r")
length <- 400
x <- seq(-1, 5, length.out = length)
y <- seq(-1, 5, length.out = length)
dat <- expand.grid(x= x, y = y)
dat$z <- (8 - (-1 * dat$x + 5 * dat$y))^2 + (0 - (-3 * dat$x + 3 * dat$y))^2
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
c <- circleFun(diameter = 2, npoints = 400)
# ridge
ridge <- ggplot(
data = dat,
mapping = aes(x = x, y = y, z = z, color = z)) +
# Axes
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
# RSS contours
geom_contour(breaks = c(2, 9.125, 16.25)) +
# Diamond
geom_polygon(
data = c,
mapping = aes(x = x, y = y),
fill = "red",
alpha = 0.5,
inherit.aes = FALSE
) +
# Points for the OLS and ridge solutions
geom_point(
data = data.frame(x = c(0.255, 2), y = c(0.967, 2)),
mapping = aes(x = x, y = y),
size = 2,
inherit.aes = FALSE
) +
# Axis and point labels
annotate(
"text",
label = "beta[1]",
parse = TRUE,
x = 2,
y = -0.2,
size = 8
) +
annotate(
"text",
label = "beta[2]",
parse = TRUE,
x = -0.2,
y = 2,
angle = 90
) +
annotate(
"text",
label = "hat(beta)^OLS",
parse = TRUE,
x = 2.20,
y = 2.10,
) +
annotate(
"text",
label = "hat(beta)^ridge",
parse = TRUE,
x = 0.455,
y = 1.067,
) +
# Pre-defined theme
reu_blank +
# Keeps x and y coordinates the same length.
coord_fixed()
ridge
library(ggplot2)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("themes.r")
length <- 400
x <- seq(-1, 5, length.out = length)
y <- seq(-1, 5, length.out = length)
dat <- expand.grid(x= x, y = y)
dat$z <- (8 - (-1 * dat$x + 5 * dat$y))^2 + (0 - (-3 * dat$x + 3 * dat$y))^2
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
c <- circleFun(diameter = 2, npoints = 400)
# ridge
ridge <- ggplot(
data = dat,
mapping = aes(x = x, y = y, z = z, color = z)) +
# Axes
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
# RSS contours
geom_contour(breaks = c(2, 9.125, 16.25)) +
# Diamond
geom_polygon(
data = c,
mapping = aes(x = x, y = y),
fill = "red",
alpha = 0.5,
inherit.aes = FALSE
) +
# Points for the OLS and ridge solutions
geom_point(
data = data.frame(x = c(0.255, 2), y = c(0.967, 2)),
mapping = aes(x = x, y = y),
size = 2,
inherit.aes = FALSE
) +
# Axis and point labels
annotate(
"text",
label = "beta[1]",
parse = TRUE,
x = 2,
y = -0.2,
size = 8
) +
annotate(
"text",
label = "beta[2]",
parse = TRUE,
x = -0.2,
y = 2,
size = 8,
angle = 90,
) +
annotate(
"text",
label = "hat(beta)^OLS",
parse = TRUE,
x = 2.20,
y = 2.10,
size = 8
) +
annotate(
"text",
label = "hat(beta)^ridge",
parse = TRUE,
x = 0.455,
y = 1.067,
size = 8
) +
# Pre-defined theme
reu_blank +
# Keeps x and y coordinates the same length.
coord_fixed()
# lasso
lasso <- ggplot(
data = dat,
mapping = aes(x = x, y = y, z = z, color = z)) +
# Axes
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
# RSS contours
geom_contour(breaks = c(2, 10, 18)) +
# Diamond
geom_polygon(
data = data.frame(x = c(1, 0, -1, 0), y = c(0, 1, 0, -1)),
mapping = aes(x = x, y = y),
fill = "red",
alpha = 0.5,
inherit.aes = FALSE
) +
# Points for the OLS and lasso solutions
geom_point(
data = data.frame(x = c(0, 2), y = c(1, 2)),
mapping = aes(x = x, y = y),
size = 2,
inherit.aes = FALSE
) +
# Axis and point labels
annotate(
"text",
label = "beta[1]",
parse = TRUE,
x = 2,
y = -0.2,
size = 8
) +
annotate(
"text",
label = "beta[2]",
parse = TRUE,
x = -0.2,
y = 2,
size = 8,
angle = 90
) +
annotate(
"text",
label = "hat(beta)^OLS",
parse = TRUE,
x = 2.20,
y = 2.10,
size = 8
) +
annotate(
"text",
label = "hat(beta)^lasso",
parse = TRUE,
x = 0.20,
y = 1.10,
size = 8
) +
# Pre-defined theme
reu_blank +
# Keeps x and y coordinates the same length.
coord_fixed()
lasso
library(ggplot2)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("themes.r")
length <- 400
x <- seq(-1, 5, length.out = length)
y <- seq(-1, 5, length.out = length)
dat <- expand.grid(x= x, y = y)
dat$z <- (8 - (-1 * dat$x + 5 * dat$y))^2 + (0 - (-3 * dat$x + 3 * dat$y))^2
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
c <- circleFun(diameter = 2, npoints = 400)
# ridge
ridge <- ggplot(
data = dat,
mapping = aes(x = x, y = y, z = z, color = z)) +
# Axes
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
# RSS contours
geom_contour(breaks = c(2, 9.125, 16.25)) +
# Diamond
geom_polygon(
data = c,
mapping = aes(x = x, y = y),
fill = "red",
alpha = 0.5,
inherit.aes = FALSE
) +
# Points for the OLS and ridge solutions
geom_point(
data = data.frame(x = c(0.255, 2), y = c(0.967, 2)),
mapping = aes(x = x, y = y),
size = 2,
inherit.aes = FALSE
) +
# Axis and point labels
annotate(
"text",
label = "beta[1]",
parse = TRUE,
x = 2,
y = -0.2,
size = 8
) +
annotate(
"text",
label = "beta[2]",
parse = TRUE,
x = -0.2,
y = 2,
size = 8,
angle = 90,
) +
annotate(
"text",
label = "hat(beta)^OLS",
parse = TRUE,
x = 2.30,
y = 2.10,
size = 8
) +
annotate(
"text",
label = "hat(beta)^ridge",
parse = TRUE,
x = 0.555,
y = 1.067,
size = 8
) +
# Pre-defined theme
reu_blank +
# Keeps x and y coordinates the same length.
coord_fixed()
# lasso
lasso <- ggplot(
data = dat,
mapping = aes(x = x, y = y, z = z, color = z)) +
# Axes
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
# RSS contours
geom_contour(breaks = c(2, 10, 18)) +
# Diamond
geom_polygon(
data = data.frame(x = c(1, 0, -1, 0), y = c(0, 1, 0, -1)),
mapping = aes(x = x, y = y),
fill = "red",
alpha = 0.5,
inherit.aes = FALSE
) +
# Points for the OLS and lasso solutions
geom_point(
data = data.frame(x = c(0, 2), y = c(1, 2)),
mapping = aes(x = x, y = y),
size = 2,
inherit.aes = FALSE
) +
# Axis and point labels
annotate(
"text",
label = "beta[1]",
parse = TRUE,
x = 2,
y = -0.2,
size = 8
) +
annotate(
"text",
label = "beta[2]",
parse = TRUE,
x = -0.2,
y = 2,
size = 8,
angle = 90
) +
annotate(
"text",
label = "hat(beta)^OLS",
parse = TRUE,
x = 2.30,
y = 2.10,
size = 8
) +
annotate(
"text",
label = "hat(beta)^lasso",
parse = TRUE,
x = 0.30,
y = 1.10,
size = 8
) +
# Pre-defined theme
reu_blank +
# Keeps x and y coordinates the same length.
coord_fixed()
lasso
rige
ridge
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
library(ggplot2)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("themes.r")
len <- 500
# Parameter values used to compute LASSO, SCAD, and MCP.
lambda <- 2
a <- 3
# This function returns -1 if x is negative and 1 if x is positive.
sign <- function(x)
{
return(ifelse(x < 0, -1, 1))
}
# PLOT 1: Penalty functions for LASSO, SCAD, and MCP.
# The following three functions compute the penalty for some coefficient value
# beta using the parameters lambda and a.
lasso <- function(beta, lambda)
{
abs(beta) * lambda
}
scad <- function(beta, lambda, a)
{
beta <- abs(beta)
output <- ifelse (beta < lambda, lambda * beta, 0)
output <- ifelse(beta >= lambda & beta < a * lambda,
(2 * a * lambda * beta - beta^2 - lambda^2) / (2 * (a - 1)),
output)
output <- ifelse(beta >= a * lambda, (lambda^2 * (a + 1)) / 2, output)
return(output)
}
mcp <- function(beta, lambda, a)
{
beta <- abs(beta)
output <- ifelse(beta < a * lambda, lambda * beta - (beta^2) / (2 * a), 0)
output <- ifelse(beta >= a * lambda, 1/2 * a * lambda^2, output)
return(output)
}
penalty <- ggplot() +
geom_function(
mapping = aes(color = "lasso"),
fun = lasso,
args = list(lambda = 1),
xlim = c(-6, 6)
) +
geom_function(
mapping = aes(color = "scad"),
fun = scad,
args = list(lambda = 1, a = 4),
xlim = c(-6, 6)
) +
geom_function(
mapping = aes(color = "mcp"),
fun = mcp,
args = list(lambda = 1, a = 4),
xlim = c(-6, 6)
) +
xlab(label = expression(beta)) +
ylab(label = "Penalty") +
scale_x_continuous(breaks = seq(-6, 6, by = 1), limits = c(-6, 6)) +
scale_y_continuous(breaks = seq(0, 6, by = 1), limits = c(0, 6)) +
reu_border +
theme(legend.title = element_blank())
penalty
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
library(ggplot2)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
source("themes.r")
len <- 500
# Parameter values used to compute LASSO, SCAD, and MCP.
lambda <- 2
a <- 3
# This function returns -1 if x is negative and 1 if x is positive.
sign <- function(x)
{
return(ifelse(x < 0, -1, 1))
}
# PLOT 1: Penalty functions for LASSO, SCAD, and MCP.
# The following three functions compute the penalty for some coefficient value
# beta using the parameters lambda and a.
lasso <- function(beta, lambda)
{
abs(beta) * lambda
}
scad <- function(beta, lambda, a)
{
beta <- abs(beta)
output <- ifelse (beta < lambda, lambda * beta, 0)
output <- ifelse(beta >= lambda & beta < a * lambda,
(2 * a * lambda * beta - beta^2 - lambda^2) / (2 * (a - 1)),
output)
output <- ifelse(beta >= a * lambda, (lambda^2 * (a + 1)) / 2, output)
return(output)
}
mcp <- function(beta, lambda, a)
{
beta <- abs(beta)
output <- ifelse(beta < a * lambda, lambda * beta - (beta^2) / (2 * a), 0)
output <- ifelse(beta >= a * lambda, 1/2 * a * lambda^2, output)
return(output)
}
penalty <- ggplot() +
geom_function(
mapping = aes(color = "lasso"),
fun = lasso,
args = list(lambda = 1),
xlim = c(-6, 6)
) +
geom_function(
mapping = aes(color = "scad"),
fun = scad,
args = list(lambda = 1, a = 4),
xlim = c(-6, 6)
) +
geom_function(
mapping = aes(color = "mcp"),
fun = mcp,
args = list(lambda = 1, a = 4),
xlim = c(-6, 6)
) +
geom_hline(xintercept = c(-4, -1, 1, 4))
xlab(label = "Coefficient Value") +
ylab(label = "Penalty") +
scale_x_continuous(breaks = seq(-6, 6, by = 1), limits = c(-6, 6)) +
scale_y_continuous(breaks = seq(0, 6, by = 1), limits = c(0, 6)) +
reu_border +
theme(legend.title = element_blank(),
text = element_text(size = 16))
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-scad-mcp-penalty.r', echo=TRUE)
