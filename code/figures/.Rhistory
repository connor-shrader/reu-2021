af$coefficients["x8"]
af$coefficients["x1", "x2"]
af$coefficients["x1" | "x2"]
af$coeffieicnts
af$coefficients
af$coefficients[1]
af$coefficients[2]
a <- paste("x", 0:p, sep = "")
a <- paste("x", 0:10, sep = "")
a <- paste("x", 1:10, sep = "")
a
af$coefficients
af$coefficients["x1"]
extract.coef <- function(str) {}
extract.coef <- function(str) {}
extract.coef <- function(str) {
af$coefficients[str]
}
names(fm)
names(fm$coefficients)
lapply(fm$coefficients, extract.coef)
v <- lapply(fm$coefficients, extract.coef)
af$coefficients["(Intercept"]
?lapply
names(fm$coefficients)
v <- lapply(names(fm$coefficients), extract.coef)
View(v)
View(v)
v
class(v)
data.frame(v)
u <- data.frame(v)
View(u)
v <- lapply(names(fm$coefficients), function(str) af$coefficients[str])
unlist(u)
unlist(v)
View(v)
v <- unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
v
u <- unlist(lapply(names(fm$coefficients), function(str) bf$coefficients[str]))
merge(v, u)
data.frame(v, u)
df <- data.frame()
df$af <- unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
?data.frame
df <- data.frame(row.names = paste("x", 1:10, sep = ""))
df
df$af <- unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
df <- data.frame(row.names = paste("x", 0:10, sep = ""))
df$af <- unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
af$bf<- unlist(lapply(names(fm$coefficients), function(str) bf$coefficients[str]))
df
df <- data.frame(row.names = paste("x", 0:10, sep = ""))
df
df$af <- unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
df
df$bf<- unlist(lapply(names(fm$coefficients), function(str) bf$coefficients[str]))
df
df <- data.frame(row.names = paste("x", 0:10, sep = ""))
df$af <- unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
df$bf<- unlist(lapply(names(fm$coefficients), function(str) bf$coefficients[str]))
df
source('~/github/reu-2021/r/variable-selection/monte-carlo.r', echo=TRUE)
df
df$af
df["af"]
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
unlist(lapply(names(fm$coefficients), function(str) model[coefficients[str]]))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
models
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
?lapply
source('~/github/reu-2021/r/variable-selection/monte-carlo.r', echo=TRUE)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
model
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
summary(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
summary(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(summary(model))
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
summary(af)
names(af)
summary(af)
af
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
print(af)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[, str]))
}
a <- lapply(models, get.coef)
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[, str]))
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- lapply(models, get.coef)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model$str))
}
a <- lapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
model.coef <- lapply(models, function(model) model$coefficients)
?sapply
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, get.coef)
models <- c(af, bf, ab, bb, asf, bsf, asb, bsb)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, coefficients)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
models
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model[str]))
}
a <- sapply(models, coefficients)
View(a)
get.coef <- function(model)
{
print(names(model))
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
View(a)
unlist(lapply(names(fm$coefficients), function(str) af$coefficients[str]))
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) print(model$coefficients[str])))
}
a <- sapply(models, coefficients)
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) print(model$coefficients[str]))
}
a <- sapply(models, coefficients)
a
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
get.coef <- function(model)
{
print(model)
unlist(lapply(names(fm$coefficients), function(str) model$coefficients[str]))
}
a <- sapply(models, coefficients)
a
get.coef <- function(model)
{
print(model)
lapply(names(fm$coefficients), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
get.coef <- function(model)
{
print(model)
lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
af$coefficients["x1"]
af$coefficients["x2"]
af$coefficients["x3"]
get.coef <- function(model)
{
print(model)
sapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- sapply(models, coefficients)
a
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
models
get.coef <- function(model)
{
print(model)
lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
a
get.coef <- function(model)
{
print(model)
unlist(lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
a
get.coef <- function(model)
{
print(model)
unlist(lapply(c("(Intercept)", paste("x", 1:10, sep = "")), function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
df <- data.frame(a)
View(df)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
df <- data.frame(a, row.names = row.names)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names), function(str) model$coefficients[str])
}
a <- lapply(models, get.coef)
df <- data.frame(a)
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names, function(str) model$coefficients[str]))
}
a <- lapply(models, get.coef)
df <- data.frame(a, row.names = row.names)
df
models <- list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
row.names <- c("(Intercept)", paste("x", 1:10, sep = ""))
get.coef <- function(model)
{
print(model)
unlist(lapply(row.names, function(str) model$coefficients[str]))
}
df <- data.frame(lapply(models, get.coef), row.names = row.names)
list(af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf, asb = asb, bsb = bsb)
list(af, bf, ab, bb, asf, bsf, asb, bsb)
data()
BOD
?BOD
ggplot(data = BOD)
library(ggplot)
library(tidyverse)
ggplot(data = BOD)
ggplot(data = BOD,)
ggplot(data = BOD,
mapping = aes(x = Time,))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand)) +
geom_point()
geom_point(size = 5)
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand)) +
geom_point(size = 5) +
geom_line(colour = "red")
ggplot(BOD, aes(Time, demand))+
geom_point(size = 3)+
geom_line(colour = "red")
models <- list(fm = fm, nm = nm, af = af, bf = bf, ab = ab, bb = bb, asf = asf, bsf = bsf,
asb = asb, bsb = bsb, scad = scad, mcp = mcp)
models <- list(fm)
models$fm
source('~/github/reu-2021/code/variable-selection/monte-carlo.r', echo=TRUE)
models <- list(fm)
models$fm
models[1]
models <- list(fm = fm)
models[1]
coef(fm)
coef(ab)
unlist(lapply(row.names, function(predictor) coef(ab)[predictor]))
View(df)
df[true] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
p <- 10
df[true] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
df["true"] <- c(1, 2, -2, 0, 0, 0.5, 3, rep(0, (p-6)))
# Sets all zero coefficients to NA (this makes it easier to read).
df[is.na(df)] <- 0
scad <- cv.ncvreg(X = ex.dat[, -1], y = ex.dat$y, penalty = "SCAD")
coef(scad)
?system.time
library(dplyr)
multi.merge <-function(model_list, col_names){ #takes input of list of lm models, and vector of column names
for (i in 1:length(model_list)){
model_list[[i]] <- data.frame(as.matrix(coef(model_list[[i]]))) #turns lm model class into dataframe of coefficients
model_list[[i]]$betas <- row.names(model_list[[i]]) #adds column of beta coefficient names
}
# ugly code to rearrange order of beta column and full model column
full_df <- model_list[[1]]
full_df <- full_df[-1]
full_df$fm <- model_list[[1]][[1]]
for (i in 2:length(model_list)){
full_df <- left_join(full_df, model_list[[i]], by = "betas") #joins code together by beta coefficient name
}
full_df[is.na(full_df)] <- 0
colnames(full_df) <- c("betas", col_names) #renames columns according to what was input to the function
return(full_df)
}
coefs_df <- multi.merge(list(fm, af, bf, ab, bb, asf, bsf, asb, bsb, mcp, scad, lasso, ridge, enet),
c("fm", "af", "bf", "ab", "bb", "asf", "bsf", "asb", "bsb", "mcp", "scad", "lasso", "ridge", "elastic_net"))
names(lasso)
coef(lasso)
coef(mcp)
coef(scad)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
setwd("~/github/reu-2021/code/figures")
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?theme
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?scale_x_continuous
ggplot(
data = dat,
mapping = aes(x = x, y = y, z = z)) +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
geom_contour(breaks = c(2, 10, 18)) +
# Diamond
geom_polygon(
data = data.frame(x = c(1, 0, -1, 0), y = c(0, 1, 0, -1)),
mapping = aes(x = x, y = y),
fill = "red",
alpha = 0.5,
inherit.aes = FALSE
) +
geom_point(
data = data.frame(x = c(0, 2), y = c(1, 2)),
mapping = aes(x = x, y = y),
size = 2,
inherit.aes = FALSE
) +
# Pre-defined theme
reu_blank +
theme(
axis.text.x = element_text(hjust = 0.5)
)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
2
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
?geom_text
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
t
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
ggplot(
data = dat,
mapping = aes(x = x, y = y, z = z)) +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)) +
geom_contour(breaks = c(2, 10, 18)) +
# Diamond
geom_polygon(
data = data.frame(x = c(1, 0, -1, 0), y = c(0, 1, 0, -1)),
mapping = aes(x = x, y = y),
fill = "red",
alpha = 0.5,
inherit.aes = FALSE
) +
geom_point(
data = data.frame(x = c(0, 2), y = c(1, 2)),
mapping = aes(x = x, y = y),
size = 2,
inherit.aes = FALSE
) +
geom_text(
x = -0.3,
y = 1.5,
label = "beta[2]",
angle = 90,
parse = TRUE
) +
# Pre-defined theme
reu_blank +
# Keeps x and y coordinates the same length.
coord_fixed()
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
2
source('~/github/reu-2021/code/figures/lasso-ridge.r', echo=TRUE)
